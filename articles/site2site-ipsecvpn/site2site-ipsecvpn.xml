<?xml version='1.0'?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V5.0//EN"
        "/usr/share/xml/docbook/schema/dtd/5.0/docbook.dtd" [

<!ENTITY author         SYSTEM "author.xml">
<!ENTITY legal          SYSTEM "legal.xml">

<!ENTITY ams-interfaces SYSTEM "files/ams-interfaces">
<!ENTITY gla-interfaces SYSTEM "files/gla-interfaces">
<!ENTITY tls-interfaces SYSTEM "files/tls-interfaces">

<!ENTITY url.infosec
  "<link xmlns='http://docbook.org/ns/docbook'
  xlink:href='http://en.wikipedia.org/wiki/Information_security'>Information security</link>">

<!ENTITY url.ike
  "<link xmlns='http://docbook.org/ns/docbook'
  xlink:href='http://en.wikipedia.org/wiki/Internet_Key_Exchange'>Internet Key Exchange</link>">

<!ENTITY url.sa
  "<link xmlns='http://docbook.org/ns/docbook'
  xlink:href='http://en.wikipedia.org/wiki/Security_association'>Security association</link>">

<!ENTITY url.ipsec-illustrated
  "<link xmlns='http://docbook.org/ns/docbook'
  xlink:href='http://www.unixwiz.net/techtips/iguide-ipsec.html'>An Illustrated Guide to IPsec</link>">

<!ENTITY url.nist-800-77
  "<link xmlns='http://docbook.org/ns/docbook'
  xlink:href='http://csrc.nist.gov/publications/nistpubs/800-77/sp800-77.pdf'>Guide to IPsec VPNs</link>">

<!ENTITY url.cisco-p2p-gre
  "<link xmlns='http://docbook.org/ns/docbook'
  xlink:href='http://www.cisco.com/en/US/docs/solutions/Enterprise/WAN_and_MAN/P2P_GRE_IPSec/P2P_GRE.html'>Point-to-Point GRE over IPsec Design Guide</link>">

<!ENTITY url.gre-tcp-iperf.pcap
  "<link xmlns='http://docbook.org/ns/docbook'
  xlink:href='https://www.inetdoc.net/articles/site2site-ipsecvpn/files/gre-tcp-iperf.pcap'><filename>gre-tcp-iperf.pcap</filename></link>">

<!ENTITY url.gla-zebra.conf
  "<link xmlns='http://docbook.org/ns/docbook'
  xlink:href='https://www.inetdoc.net/articles/site2site-ipsecvpn/files/gla-zebra.conf'><filename>zebra.conf</filename></link>">

<!ENTITY url.gla-ospfd.conf
  "<link xmlns='http://docbook.org/ns/docbook'
  xlink:href='https://www.inetdoc.net/articles/site2site-ipsecvpn/files/gla-ospfd.conf'><filename>ospfd.conf</filename></link>">

<!ENTITY url.TLS-confg
  "<link xmlns='http://docbook.org/ns/docbook'
  xlink:href='https://www.inetdoc.net/articles/site2site-ipsecvpn/files/TLS-confg'><filename>TLS-confg</filename></link>">

<!ENTITY % inetdoc_urls SYSTEM 'inetdoc.urls.xml'>
%inetdoc_urls;

<!ENTITY url.ospf-lab
  "<link xmlns='http://docbook.org/ns/docbook'
  xlink:href='&url.interco.ospf-frr.answers;'><citetitle>Routage dynamique avec
  OSPF</citetitle></link>">

<!ENTITY % rfc_urls SYSTEM 'rfc.urls.xml'>
%rfc_urls;
]>

<article xml:lang='fr' xml:id='site2site-ipsecvpn'>
<info>
  <title>Routage OSPF &amp; VPN IPsec site à site</title>

  &author;
  <abstract>
  <para>
  <informaltable frame='none' pgwide='1'>
  <tgroup cols='2' align='left' colsep='0' rowsep='0'>
  <colspec colwidth='5*'/>
  <colspec colwidth='200px'/>
  <tbody>
    <row>
    <entry valign='top'>
      <para>La mise en œuvre d'un réseau privé virtuel (<acronym>VPN</acronym>)
      avec le jeu de protocoles <acronym>IPsec</acronym> est un exercice qui
      peut rapidement tourner au calvaire compte tenu du nombre des
      combinaisons possibles entre les différents algorithmes et autres
      paramètres. C'est particulièrement vrai si on utilise des systèmes
      d'interconnexion différents. Cet article est une synthèse rédigée après
      avoir «survécu» à la configuration d'un <acronym>VPN</acronym>
      <acronym>IPsec</acronym> avec routage <acronym>OSPF</acronym> entre deux
      sites distants ; le premier utilisant un routeur
      <trademark>Cisco</trademark> et le second utilisant un routeur
      GNU/Linux.</para>

      <para>Après avoir présenté le contexte et rappelé sommairement les
      caractéristiques du jeu de protocoles <acronym>IPsec</acronym>, on
      précise les choix de combinaisons de protocoles puis on décrit étape par
      étape le processus de déploiement de la topologie type d'intercconnexion
      réseau.</para>
    </entry>
    <entry>
    <inlinemediaobject>
    <imageobject role='html'>
      <imagedata fileref='images/thumb008.png' format='PNG' width='200px' scalefit='1'/>
    </imageobject>
    <imageobject role='fo'>
      <imagedata fileref='images/thumb008.png' format='PNG' width='4cm' scalefit='1'/>
    </imageobject>
    </inlinemediaobject>
    </entry>
    </row>
  </tbody>
  </tgroup>
  </informaltable>
  </para>
  </abstract>
  <keywordset>
    <keyword>ah</keyword>
    <keyword>cisco</keyword>
    <keyword>crypto map</keyword>
    <keyword>esp</keyword>
    <keyword>iproute</keyword>
    <keyword>ipsec</keyword>
    <keyword>ipsec-tools</keyword>
    <keyword>iptables</keyword>
    <keyword>mangle</keyword>
    <keyword>ospf</keyword>
    <keyword>frr</keyword>
    <keyword>racoon</keyword>
    <keyword>wireshark</keyword>
  </keywordset>
</info>

<section xml:id='site2site-ipsecvpn.legal.meta'>
  &legal;
  <section xml:id='site2site-ipsecvpn.meta'>
    <title>Méta-information</title>

  <para>Cet article est écrit avec <link
  xlink:href="http://www.docbook.org"><citetitle>DocBook</citetitle></link> XML
  sur un système <link xlink:href="http://www.debian.org"><citetitle>Debian
  GNU/Linux</citetitle></link>. Il est disponible en version imprimable au
  format PDF : <link
  xlink:href="https://www.inetdoc.net/pdf/__printbasename__"><literal>__printbasename__</literal></link>.</para>
  </section>

  <section xml:id='site2site-ipsecvpn.convtypo'>
    <title>Conventions typographiques</title>

  <para>Tous les exemples d'exécution des commandes sont précédés d'une invite
  utilisateur ou <wordasword>prompt</wordasword> spécifique au niveau des
  droits utilisateurs nécessaires sur le système.</para>

  <itemizedlist>
    <listitem>
    <para>Toute commande précédée de l'invite <prompt>$</prompt> ne nécessite
    aucun privilège particulier et peut être utilisée au niveau utilisateur
    simple.</para>
    </listitem>
    <listitem>
    <para>Toute commande précédée de l'invite <prompt>#</prompt> nécessite les
    privilèges du super-utilisateur.</para>
    </listitem>
  </itemizedlist>
  </section>
</section>

<?custom-pagebreak?>
<section xml:id='site2site-ipsecvpn.ipsec-defs'>
  <title>IPsec, les principes</title>

  <para>Aborder la thématique des réseaux privés virtuels (<wordasword>Virtual
  Private Networks</wordasword> ou <acronym>VPN</acronym>s) utilisant
  <acronym>IPsec</acronym> sans préciser les conditions dans lesquelles ces
  techniques sont utilisées est une gageure. Pire encore, justifier les choix
  effectués sur l'architecture réseau sans une présentation succincte du jeu de
  protocoles et d'algorithmes de cryptographie mis en œuvre rendrait la suite
  du document inexploitable. C'est la raison pour laquelle on présente ci-après
  un minimum d'éléments sur <acronym>IPsec</acronym>.</para>

  <para>Il existe déjà un grand nombre de documentations en ligne d'excellente
  qualité sur le sujet. Alors, pourquoi un énième rappel sur les protocoles
  IPsec ? La raison d'être de cette section est de servir de référence sur les
  choix effectués par la suite. Lors des recherches en ligne sur
  <acronym>IPsec</acronym>, on trouve trop souvent des copies de fichiers de
  configuration peu ou pas commentés qui répondent à un contexte singulier.
  Ici, l'objectif est justifier les options retenues en fonction du contexte
  défini.</para>

  <bridgehead xml:id='ipsec-cia' renderas='sect2'>Le retour de la triade CIA
  ... ou presque</bridgehead>

    <para>Au niveau le plus général, en sécurité des systèmes d'information
    (&url.infosec;), la lettre <keycap>C</keycap> correspond à
    <wordasword>Confidentiality</wordasword>, la lettre <keycap>I</keycap>
    correspond à <wordasword>Integrity</wordasword> et la lettre
    <keycap>A</keycap> correspond à <wordasword>Availability</wordasword>. Dans
    le contexte de ce document, seule l'interprétation de la lettre
    <keycap>A</keycap> diffère ; le terme <wordasword>Availability</wordasword>
    est remplacé par <wordasword>Authentication</wordasword>. La «triade CIA»
    est donc aussi un moyen mnémotechnique pertinent dans le contexte
    présent. Voir l'article &url.infosecconcepts;.</para>

    <para><acronym>IPsec</acronym> n'est pas un protocole unique mais
    <emphasis>un ensemble</emphasis> de protocoles définis par un organisme
    très connu : &url.ietf;. Le but est de fournir un haut niveau de sécurité
    dans l'échange des paquets <acronym>IP</acronym>. On se situe donc au
    niveau de la couche réseau de la modélisation. Les services doivent
    utiliser la cryptographie et être interopérables. Les points clés sont
    :</para>

    <itemizedlist>
    <listitem>
      <para><emphasis>Confidentialité</emphasis> : l'émetteur chiffre les
      paquets avant de les transmettre sur l'Internet.</para>
    </listitem>
    <listitem>
      <para><emphasis>Intégrité</emphasis> : le récepteur vérifie que les
      paquets reçus n'ont pas été altérés lors de la transmission.</para>
    </listitem>
    <listitem>
      <para><emphasis>Authentification</emphasis> : le récepteur vérifie
      l'identité de l'émetteur. Plusieurs méthodes d'authentification sont
      disponibles.</para>

      <itemizedlist>
        <listitem>
	<para>Clés partagées ou <wordasword>preshared keys</wordasword>. La
	«clé secrète» est déposée à l'avance sur chaque extrémité. La même clé
	est utilisée durant les phases d'établissement des associations de
	sécurité.</para>
	</listitem>
	<listitem>
	<para>Certificats numériques signés ou <wordasword>signed digital
	certificates</wordasword>. Chaque extrémité détient un certificat
	propre contenant un couple clé privée/clé publique. Une extrémité
	utilise la clé privée pour signer les données à émettre tandis que
	l'autre extrémité utilise la clé publique pour vérifier les données
	reçues.</para>
	</listitem>
	<listitem>
	<para>Authentification externe. On fait appel à un service externe tel
	que <citetitle>Keberos</citetitle> ou <citetitle>Radius</citetitle> qui
	permet d'accéder aux différentes formes de couple nom d'utilisateur/mot
	de passe : <wordasword>One Time Password</wordasword>
	(<acronym>OTP</acronym>), token, biométrie, etc.</para>
	</listitem>
      </itemizedlist>

<note>
  <para>Dans le contexte de ce document, la méthode d'authentification utilise
  les clés partagées. Le trafic doit être sécurisé de façon permanente et
  continue entre deux sites «fixes».</para>
</note>
    </listitem>
    <listitem>
      <para><emphasis>Anti rejeu</emphasis> : le récepteur examine les paquets
      et rejette les paquets périmés (reçus en dehors de la fenêtre de temps
      prévue) et/ou répétés.</para>
    </listitem>
    </itemizedlist>

    <para>Les conditions d'utilisation des points ci-dessus sont négociées à
    l'aide du protocole <acronym>IKE</acronym> (&url.ike;) et de la mise en
    place d'associations de sécurité <acronym>SA</acronym> (&url.sa;). Il est
    aussi possible de configurer manuellement les politiques de chiffrement et
    les algorithmes. Dans ce dernier cas, le protocole <acronym>IKE</acronym>
    est inutile.</para>

  <bridgehead xml:id='ipsec.dh' renderas='sect2'>L'échange de clés
  Diffie-Hellman</bridgehead>
    
    <para>Cette méthode est utilisée dans les échanges du protocole
    <acronym>IKE</acronym> pour générer un secret partagé entre les deux
    extrémités de façon sécurisée. Avec cette méthode, un «observateur» ayant
    capturé les échanges <acronym>IKE</acronym> ne peut pas remonter au secret
    partagé.</para>

    <para>Le secret partagé est utilisé pour calculer une valeur qui sert
    ensuite aux calculs des clés utilisées dans les phases 1 et 2 du protocole
    <acronym>IKE</acronym>. Des groupes auxquels ont été associé une longueur
    de clé et une fonction de chiffrement doivent être choisis pour mettre en
    œuvre l'échange de clés. Plus la clé comprend un nombre de bits important,
    plus le secret est «solide». En contre partie, le temps de calcul est lui
    aussi plus important. Cette méthode est appelée à chaque établissement ou
    renouvellement d'association de sécurité.</para>

    <para>Il faut ajouter à ce mécanisme d'échange de clés la technique appelée
    <wordasword>Perfect Forward Secrecy</wordasword> (<acronym>PFS</acronym>).
    Avec cette technique, les calculs de clés sont plus sûrs dans la mesure où
    les nouveaux calculs de renouvellement de <acronym>SA</acronym> ne se font
    pas à partir des anciennes clés.</para>

  <bridgehead xml:id='ipsec.ah-esp' renderas='sect2'>Les deux protocoles de
  sécurisation IPsec : AH &amp; ESP</bridgehead>

    <para>En complément du protocole <acronym>IKE</acronym> qui établit un
    tunnel, <acronym>IPsec</acronym> s'appuie sur deux services qui peuvent
    être utilisés seuls ou associés.</para>

    <variablelist>
      <varlistentry>
      <term><citetitle>Authentication Header</citetitle></term>
      <term><acronym>AH</acronym></term>
      <term>protocole n°51</term>
      <listitem>
      <para>Le protocole <acronym>AH</acronym> authentifie l'émetteur des
      données, contrôle l'intégrité du paquet <acronym>IP</acronym> (en-tête
      <emphasis>et</emphasis> charge utile) et assure le service anti rejeu. Il
      couvre donc les lettres <keycap>I</keycap> et <keycap>A</keycap> de la
      triade <acronym>CIA</acronym>.</para>

      <para>Les traitements associés utilisent des algorithmes de «hachage»
      tels que <wordasword>Message Digest 5</wordasword>
      (<acronym>MD5</acronym>) ou <wordasword>Secure Hash
      Algorithm</wordasword> (<acronym>SHA-1</acronym>,
      <acronym>SHA-256</acronym>, etc.). Un algorithme de hachage est assocé à
      une clé issue de la méthode d'authentification choisie pour constituer un
      <wordasword>Hash base Message Authentication Code</wordasword>
      (<acronym>HMAC</acronym>).</para>

      <para>L'en-tête <acronym>AH</acronym> est inséré à la suite de l'en-tête
      <acronym>IP</acronym> pour garantir l'intégrité et l'authenticité des
      données. On se protège ainsi contre toute altération du paquet lors de
      son transit.</para>

      <para>Des représentations graphiques détaillées de l'encapsulation du
      protocole <acronym>AH</acronym> sont fournies dans le document
      &url.ipsec-illustrated; pour les deux modes de fonctionnement transport
      et tunnel présentés ci-après.</para>
      </listitem>
      </varlistentry>

      <varlistentry>
      <term><citetitle>Encapsulating Security Payload</citetitle></term>
      <term><acronym>ESP</acronym></term>
      <term>protocole n°50</term>
      <listitem>
      <para>Le protocole <acronym>ESP</acronym> se distingue du précédent par
      le chiffrement de la partie données avant encapsulation dans le paquet
      <acronym>IP</acronym>. On intègre ainsi la partie
      <emphasis>confidentialité</emphasis> aux fonctions de
      sécurisation. Ce protocole couvre donc les trois lettres de la triade
      <acronym>CIA</acronym> sur la partie charge utile du paquet.</para>

      <para>Les traitements associés, en plus des algorithmes de hachage cités
      précédemment, font intervenir des algorithmes de chiffrement tels que
      <wordasword>Triple Data Encryption Standard</wordasword>
      (<acronym>3DES</acronym>) ou <wordasword>Advanced Encryption
      Standard</wordasword> (<acronym>AES</acronym>).</para>

      <para>Comme dans le cas du protocole <acronym>AH</acronym>, des
      représentations graphiques détaillées de l'encapsulation sont fournies
      dans le document &url.ipsec-illustrated; pour les deux modes de
      fonctionnement transport et tunnel présentés ci-après.</para>
      </listitem>
      </varlistentry>
    </variablelist>

  <bridgehead xml:id='ipsec-transport-tunnel' renderas='sect2'>Les deux modes
  de fonctionnement IPsec : Transport &amp; Tunnel</bridgehead>

    <variablelist>
      <varlistentry>
      <term><citetitle>host-to-host transport mode</citetitle></term>
      <term>mode transport</term>
      <listitem>
      <para>Dans ce mode, les échanges de paquets <acronym>IP</acronym> sont
      sécurisés entre deux extrémités. Seule la charge utile ou
      <wordasword>payload</wordasword> est concernée par les traitements et
      l'en-tête du paquet <acronym>IP</acronym> est préservé pour permettre au
      routage de fonctionner de façon transparente.</para>
      </listitem>
      </varlistentry>

      <varlistentry>
      <term><citetitle>network-to-network tunnel mode</citetitle></term>
      <term>mode tunnel</term>
      <listitem>
      <para>Dans ce mode, les échanges de paquets <acronym>IP</acronym> sont
      sécurisés de réseau à réseau. La totalité du paquet <acronym>IP</acronym>
      (en-tête + charge utile) est encapsulée et un nouvel en-tête de paquet
      <acronym>IP</acronym> est créé.</para>
      </listitem>
      </varlistentry>
    </variablelist>

    <para>Le choix entre ces deux modes de fonctionnement est un point
    essentiel dans la mise en œuvre d'un <acronym>VPN</acronym>
    <acronym>IPsec</acronym>. L'argumentation tourne souvent autour de
    l'inclusion ou non de l'en-tête de paquet <acronym>IP</acronym> dans les
    fonctions de sécurité de la triade <acronym>CIA</acronym> et du nombre de
    réseaux à faire transiter via le <acronym>VPN</acronym>.</para>

  <bridgehead xml:id='ipsec-ike' renderas='sect2'>L'établissement d'une
  association de sécurité : IKE &amp; ISAKMP</bridgehead>

    <para>L'objectif du mécanisme d'échange <acronym>IKE</acronym>, via le
    protocole <acronym>ISAKMP</acronym>, est de permettre à deux extrémités en
    communication d'établir une association de sécurité. Cette association
    demande au moins deux étapes.</para> 

    <variablelist>
      <varlistentry>
      <term><citetitle>IKE phase 1</citetitle></term>
      <term><acronym>ISAKMP-SA</acronym></term>
      <listitem>
      <para>Durant cette première phase, il y a établissement d'une session
      sécurisée <acronym>ISAKMP</acronym> entre les deux extrémités que l'on
      appelle <acronym>ISAKMP SA</acronym>. C'est dans cette même phase que
      sont configurés les jeux de traitements utilisables
      (<wordasword>transform-set</wordasword>) : algorithmes de hachage,
      algorithmes de chiffrement et méthode d'authentification.</para>
      </listitem>
      </varlistentry>

      <varlistentry>
      <term><citetitle>IKE phase 1.5</citetitle></term>
      <listitem>
      <para>Cette «phase intermédiaire» ne peut se dérouler que sous la
      protection du tunnel <acronym>ISAKMP</acronym> établi en phase 1. Elle
      est aussi appelée <wordasword>Extended Authentication</wordasword>
      (<acronym>XAUTH</acronym>). Ici, l'authentification utilisateur est
      étendue pour fournir des éléments de configuration supplémentaires à un
      client <acronym>VPN</acronym> : adresses <acronym>IPv4</acronym> ou
      <acronym>IPv6</acronym>, masque réseau, serveur DNS, etc.</para>

<note>
  <para>Dans le contexte de ce document, cette phase est sans objet dans la
  mesure où les deux extrémités du tunnel <acronym>ISAKMP</acronym> sont des
  routeurs dont les paramètres de configuration sont déjà connus.</para>
</note>
      </listitem>
      </varlistentry>

      <varlistentry>
      <term><citetitle>IKE phase 2</citetitle></term>
      <term><citetitle>IPsec-SA</citetitle></term>
      <listitem>
      <para>Comme dans le cas précédent, cette phase ne peut se dérouler que
      sous la protection du tunnel <acronym>ISAKMP</acronym> établi en phase 1.
      À la différence de la phase 1, on ne parle plus d'une association de
      sécurité bidirectionnelle utilisant la même clé partagée entre les deux
      extrémités. Ici, il faut établir deux associations unidirectionnelles
      entre les mêmes extrémités. Une fois que ces deux <acronym>SA</acronym>
      sont en place, le tunnel <acronym>IPsec</acronym> est actif. Les
      paramètres négociés sont quasiment les mêmes que lors de la phase 1 :
      algorithme de hachage, algorithme de chiffrement, groupe Diffie Hellman,
      informations anti rejeu, durée de vie de l'association de
      sécurité.</para>
      </listitem>
      </varlistentry>
    </variablelist>

  <bridgehead xml:id='ipsec-encap' renderas='sect2'>La synthèse sur
  l'encapsulation</bridgehead>

  <table frame='all'>
    <title>Encapsulation : modes de fonctionnement &amp; protocoles</title>
  <tgroup cols='3' align='left' colsep='1' rowsep='1'>
  <colspec colname='c1' colwidth='1*'/>
  <colspec colname='c2' colwidth='4*'/>
  <colspec colname='c3' colwidth='4*'/>
  <thead>
    <row>
      <entry align='center'>Protocole</entry>
      <entry align='center'>Mode Transport</entry>
      <entry align='center'>Mode Tunnel</entry>
    </row>
  </thead>
  <tbody>
    <row>
      <entry><citetitle>AH</citetitle></entry>
      <entry morerows='2' align='center'>
      <inlinemediaobject>
      <imageobject role='html'>
        <imagedata fileref='images/ipsec-transport.png' format='PNG' depth='160px' scalefit='1'/>
      </imageobject>
      <imageobject role='fo'>
        <imagedata fileref='images/ipsec-transport.png' format='PNG' depth='1.8cm' scalefit='1'/>
      </imageobject>
      </inlinemediaobject>
      </entry>
      <entry morerows='2' align='center'>
      <inlinemediaobject>
      <imageobject role='html'>
        <imagedata fileref='images/ipsec-tunnel.png' format='PNG' depth='160px' scalefit='1'/>
      </imageobject>
      <imageobject role='fo'>
        <imagedata fileref='images/ipsec-tunnel.png' format='PNG' depth='1.8cm' scalefit='1'/>
      </imageobject>
      </inlinemediaobject>
      </entry>
    </row>
    <row>
      <entry><citetitle>ESP</citetitle></entry>
    </row>
    <row>
      <entry><citetitle>AH+ESP</citetitle></entry>
    </row>
  </tbody>
  </tgroup>
  </table>

  <bridgehead xml:id='ipsec-unicast-vs-gre' renderas='sect2'>Le trafic unicast ou le
  tunnel GRE</bridgehead>

    <para>Pour achever cette partie sur les principes du jeu de protocoles
    <acronym>IPsec</acronym>, il reste un dernier point très important à
    ajouter : <emphasis><acronym>IPsec</acronym> seul ne peut véhiculer que le
    trafic unicast</emphasis>. C'est un critère essentiel à prendre en compte
    lors du choix d'une solution d'encapsulation.</para>
    
    <para>Dans le contexte de ce document, nous sommes apparemment face à un
    sérieux problème sachant que tous les échanges entre instances de
    protocoles de routage dynamique se font en multicast. Fort heureusement, il
    existe une solution : le tunnel <acronym>GRE</acronym>.</para>

    <para>À priori, les tunnels <acronym>GRE</acronym> (<wordasword>Generic
    Routing Encapsulation</wordasword>) n'ont aucun rapport avec le jeu de
    protocoles <acronym>IPsec</acronym>. Ce protocole, initialement développé
    par <trademark>Cisco</trademark>, a été conçu pour encapsuler n'importe
    quel protocole dans un tunel <acronym>IP</acronym>. Il a ensuite été étendu
    à l'encapsulation <acronym>IP</acronym> dans <acronym>IP</acronym>. Associé
    à <acronym>IPsec</acronym>, il permet de dépasser la limitation de ce
    dernier au trafic unicast.</para>

    <para>Le couple <acronym>GRE</acronym> + <acronym>IPsec</acronym> peut être
    assimilé à un mode tunnel sans restriction sur la nature du trafic
    véhiculé.</para>

    <mediaobject xml:id='site2site-ipsecvpn.gre-over-ipsec'>
      <imageobject role='fo'>
      <imagedata format='PNG' fileref='images/gre-over-ipsec.png' width='9cm' scalefit='1' />
      </imageobject>
      <imageobject role='html'>
      <imagedata format='PNG' fileref='images/gre-over-ipsec.png' width='500px' scalefit='1' />
      </imageobject>
      <textobject>
      <phrase>Association GRE + IPsec</phrase>
      </textobject>
    </mediaobject>

    <para>Dans la représentation ci-dessus, le champ <citetitle>GRE IP
    Header</citetitle> correspond à l'en-tête <acronym>IP</acronym> introduit
    par l'utilisation du tunnel <acronym>GRE</acronym>.</para>

    <para>Cette même représentation montre que l'utilisation du mode transport
    avec le protocole <acronym>ESP</acronym> offre généralement un niveau de
    sécurité suffisant sachant que seul l'en-tête <acronym>IP</acronym> lié à
    l'utilisation du tunnel <acronym>GRE</acronym> est exposé. L'utilisation du
    mode tunnel implique l'encapsulation d'un en-tête <acronym>IP</acronym>
    supplémentaire qui pénalise l'espace réservé à la charge utile.</para>
</section>

<section xml:id='site2site-ipsecvpn.dynamic-routing'>
  <title>IPsec, la topologie étudiée</title>

  <bridgehead xml:id='dynamic-routing-choice' renderas='sect2'>Le choix : mode
  transport ou mode tunnel</bridgehead>

    <para>Dans la section précédente, deux points importants ont déjà été
    énoncés.</para>

    <itemizedlist>
      <listitem>
      <para><acronym>IPsec</acronym> ne véhicule que le trafic unicast.</para>
      </listitem>
      <listitem>
      <para>Le mode tunnel assure la communication d'un réseau à un autre.
      Notez bien : réseau au singulier !</para>
      </listitem>
    </itemizedlist>

    <para>L'utilisation de réseaux multiples en mode tunnel seul revient à
    constituer une topologie entièrement maillée avec un tunnel de
    communication entre chaque paire de réseau. En suivant la règle classique,
    pour <keycap>n</keycap> réseaux à interconnecter, il faut créer
    <keycap>n.(n - 1)/2</keycap> tunnels. Face au surcoût de configuration et
    d'administration d'un réseau maillé, il est nettement préférable d'utiliser
    une topologie de type <citetitle>Hub &amp; Spoke</citetitle> pour laquelle
    le nombre de tunnels à créer est <keycap>n - 1</keycap>.</para>

    <para>Il est aussi possible d'utiliser un protocole de routage dynamique
    entre les extrémités <acronym>IPsec</acronym> de façon a échanger plus
    librement les routes vers les différents réseaux. C'est justement cette
    dernière solution qui est étudiée dans ce document. Le recours au <link
    linkend='ipsec-unicast-vs-gre'>tunnel <acronym>GRE</acronym></link>
    s'impose donc.</para>

<note>
  <title>VTI : Virtual Tunnel Interface</title>
  <para>Sur les équipements <trademark>Cisco</trademark>, la notion d'interface
  virtuelle de tunnel a été introduite. Dans le contexte de ce document, ce
  type d'interface permet «d'économiser» l'encapsulation
  <acronym>GRE</acronym> sachant que le trafic multicast est directement
  traité. On gagne ainsi 24 octets de charge utile par paquet transmis. Le
  logiciel <application>iproute2</application> doit proposer un fonctionnement
  équivalent sur les systèmes GNU/Linux. Malheureusement, le paquet Debian
  correspondant ne dispose pas encore de cette fonction au moment de la
  rédaction de ce document.</para>
</note>

    <para>La liste ci-dessous reprend les arguments en faveur de l'emploi du
    <link linkend='ipsec-unicast-vs-gre'>tunnel
    <acronym>GRE</acronym></link>.</para>

    <itemizedlist>
      <listitem>
      <para><acronym>GRE</acronym> est assimilable à un tunnel
      <acronym>IPsec</acronym> dans le sens ou le paquet <acronym>IP</acronym>
      à acheminer est entièrement encapsulé.</para>
      </listitem>
      <listitem>
      <para><acronym>GRE</acronym> est sans état
      (<wordasword>stateless</wordasword>) et ne dispose pas de mécanisme de
      contrôle de flux. Ces fonctions sont assurées par les protocoles de
      routage ou les protocoles de couches supérieures. Avec
      <acronym>IPsec</acronym>, les phases d'échanges de clés assurent un
      contrôle d'état en établissant les <link linkend='ipsec-ike'>associations
      de sécurité</link>.</para>
      </listitem>
      <listitem>
      <para><acronym>GRE</acronym> ajoute un en-tête minimum de 24 octets en
      incluant les 20 octets du nouvel en-tête <acronym>IP</acronym> de
      tunnel.</para>
      </listitem>
      <listitem>
      <para><acronym>GRE</acronym> peut acheminer n'importe quel protocole de
      couche réseau du modèle <acronym>OSI</acronym>.</para>
      </listitem>
      <listitem>
      <para><acronym>GRE</acronym> permet l'acheminement du trafic multicast et
      donc des protocoles de routage dynamique à travers le tunnel.</para>
      </listitem>
    </itemizedlist>

    <para>Pour terminer sur le choix de la solution de mise en œuvre du
    <acronym>VPN</acronym> <acronym>IPsec</acronym> site à site, la
    configuration d'un tunnel GRE puis des communications
    <acronym>IPsec</acronym> en mode transport avec le protocole
    <acronym>ESP</acronym> se fait de façon totalement symétrique entre un
    routeur <trademark>Cisco</trademark> et un système GNU/Linux. Si les outils
    et la syntaxe diffèrent entre les deux types de systèmes, les
    fonctionnalités sont strictement identiques.</para>

    <para>La topologie type étudiée dans ce document reprend étape par étape
    l'installation de ces fonctions.</para>

  <bridgehead xml:id='dynamic-routing-topology' renderas='sect2'>La topologie
  type étudiée</bridgehead>

    <para>De façon très académique (et donc pas très originale), la topologie
    de base utilisée dans ce document est le <emphasis>triangle</emphasis>.
    Ainsi les deux extrémités des tunnels <acronym>GRE</acronym> et
    <acronym>IPsec</acronym> appartiennent à des réseaux différents. Du point
    de vue du routage dynamique, ces deux mêmes extrémités ne peuvent être
    adjacentes. Seul l'établissement d'un tunnel permet de véhiculer les
    échanges propres aux démons de routage dynamique.</para>

  <mediaobject xml:id='site2site-ipsecvpn.topology'>
    <imageobject role='fo'>
    <imagedata format='PNG' fileref='images/site2site-ipsecvpn.png' width='12cm' scalefit='1' />
    </imageobject>
    <imageobject role='html'>
    <imagedata format='PNG' fileref='images/site2site-ipsecvpn.png' width='640px' scalefit='1' />
    </imageobject>
    <textobject>
    <phrase>Topologie type VPN site à site OSPF + IPsec</phrase>
    </textobject>
  </mediaobject>

    <para>Dans la topologie présentée ci-dessus, les trois routeurs ont des
    rôles et/ou des systèmes différents.</para>

    <itemizedlist>
      <listitem>
      <para>Le routeur <citetitle>TLS</citetitle> est un routeur
      <trademark>Cisco</trademark> sur lequel on trouve une instance de routage
      <acronym>OSPF</acronym> et une extrémité de tunnel <acronym>GRE</acronym>
      + <acronym>IPsec</acronym>. Deux systèmes ont été étudiés : un «faux»
      routeur 7200 émulé via dynamips et un «vrai» routeur ASR1001.</para>
      </listitem>
      <listitem>
      <para>Le routeur <citetitle>AMS</citetitle> est un système
      <citetitle>Debian GNU/Linux</citetitle> qui ne fait que du routage
      statique et de la traduction d'adresses sources pour le trafic sortant
      vers l'Internet. Deux systèmes ont été étudiés : une instance de machine
      virtuelle sur <acronym>KVM</acronym> + <citetitle>openvswitch</citetitle>
      et un serveur <trademark>HP</trademark> DL-380.</para>
      </listitem>
      <listitem>
      <para>Le routeur <citetitle>GLA</citetitle> est aussi un système
      <citetitle>Debian GNU/Linux</citetitle> sur lequel on trouve une instance
      de routage <acronym>OSPF</acronym> et une extrémité de tunnel
      <acronym>GRE</acronym> + <acronym>IPsec</acronym>. Deux systèmes ont été
      étudiés : une instance de machine virtuelle sur <acronym>KVM</acronym> +
      <citetitle>openvswitch</citetitle> et un serveur
      <trademark>HP</trademark> DL-380.</para>
      </listitem>
    </itemizedlist>

    <para>Les étapes de configuration sont décrites dans les sections
    suivantes.</para>

    <itemizedlist>
      <listitem>
      <para>Configuration de la <link
      linkend='site2site-ipsecvpn.base-triangle'>topologie de base</link> et
      validation des communications au niveau réseau entre les routeurs.</para>
      </listitem>
      <listitem>
      <para>Configuration du <link
      linkend='site2site-ipsecvpn.gre-tunnel'>tunnel
      <acronym>GRE</acronym></link> entre les deux routeurs d'extrémité.</para>
      </listitem>
      <listitem>
      <para>Configuration du protocole de <link
      linkend='site2site-ipsecvpn.ospf-routing'>routage dynamique
      <acronym>OSPF</acronym></link> entre les deux mêmes routeurs d'extrémité.
      Validation des communications entre les réseaux échangés via
      <acronym>OSPF</acronym>.</para>
      </listitem>
      <listitem>
      <para>Configuration <link
      linkend='site2site-ipsecvpn.ipsec-confg'><acronym>IPsec</acronym> en mode
      transport avec le protocole <acronym>ESP</acronym></link> ; à nouveau
      entre les deux mêmes routeurs d'extrémité. Validation des phases
      d'échanges de clé <acronym>IKE</acronym> et des associations de sécurité
      (<acronym>SA</acronym>).</para>
      </listitem>
    </itemizedlist>
</section>

<section xml:id='site2site-ipsecvpn.base-triangle'>
  <title>La topologie de base : le triangle</title>

  <para>Dans cette section on configure les interfaces réseau, les routes
  statiques et on valide les communications point à point entre les différents
  routeurs de la topologie triangle de base.</para>

<note>
  <title>Note de l'auteur</title>
  <para>Le contenu de cette section peut paraître totalement superflu à toute
  personne ayant un peu d'expérience dans le domaine. Cependant, j'ai pu
  constater à de très nombreuses reprises que les (étudiants|débutants) se
  lancent systématiquement dans la configuration des services sans avoir
  simplement validé les communications aux niveaux inférieurs. C'est une figure
  classique qui se termine immanquablement par une formule du style
  «<wordasword>Ouais j'comprend rien ; çà marche pâ (Linux|IOS) c'est de la
  ...</wordasword>». C'est donc pour lutter contre ce genre de stigmate que je
  m'acharne à valider les communications point à point avant d'attaquer le vif
  du sujet.</para>
</note>

  <mediaobject xml:id='site2site-ipsecvpn.triangle'>
    <imageobject role='fo'>
    <imagedata format='PNG' fileref='images/site2site-ipsecvpn-triangle.png' width='12cm' scalefit='1' />
    </imageobject>
    <imageobject role='html'>
    <imagedata format='PNG' fileref='images/site2site-ipsecvpn-triangle.png' width='640px' scalefit='1' />
    </imageobject>
    <textobject>
    <phrase>Topologie de base : triangle</phrase>
    </textobject>
  </mediaobject>

  <bridgehead xml:id='triangle-ams' renderas='sect2'>Le routeur
  AMS</bridgehead>

    <itemizedlist>
      <listitem>
      <para>État des interfaces réseau. Le fichier de configuration est donné
      en annexe : <xref linkend='site2site-ipsecvpn.interfaces.ams'/>.</para>

<screen><prompt>$</prompt> ip addr ls scope global
1: lo: &lt;LOOPBACK,UP,LOWER_UP> mtu 16436 qdisc noqueue state UNKNOWN 
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP qlen 1000
    link/ether ba:ad:00:ca:fe:02 brd ff:ff:ff:ff:ff:ff
3: <emphasis>eth0.2</emphasis>@eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP 
    link/ether ba:ad:00:ca:fe:02 brd ff:ff:ff:ff:ff:ff
    inet <emphasis>192.0.2.2/27</emphasis> brd 192.0.2.31 scope global eth0.2
4: <emphasis>eth0.10</emphasis>@eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP 
    link/ether ba:ad:00:ca:fe:02 brd ff:ff:ff:ff:ff:ff
    inet <emphasis>192.0.2.33/27</emphasis> brd 192.0.2.63 scope global eth0.10
5: <emphasis>eth0.20</emphasis>@eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP 
    link/ether ba:ad:00:ca:fe:02 brd ff:ff:ff:ff:ff:ff
    inet <emphasis>192.0.2.65/27</emphasis> brd 192.0.2.95 scope global eth0.20</screen>
      </listitem>
      <listitem>
      <para>Table de routage</para>

<screen><prompt>$</prompt> ip route ls
default via 192.0.2.1 dev eth0.2 
<emphasis>10.10.0.0/22 via 192.0.2.34 dev eth0.10 
10.11.0.0/24 via 192.0.2.34 dev eth0.10 
10.20.0.0/22 via 192.0.2.66 dev eth0.20 
10.21.0.0/24 via 192.0.2.66 dev eth0.20</emphasis>
192.0.2.0/27 dev eth0.2  proto kernel  scope link  src 192.0.2.2 
192.0.2.32/27 dev eth0.10  proto kernel  scope link  src 192.0.2.33 
192.0.2.64/27 dev eth0.20  proto kernel  scope link  src 192.0.2.65</screen> 

      <para>Dans la copie d'écran ci-dessus, on trouve quatre entrées de
      routage statique vers les réseaux <systemitem
      class='ipaddress'>10.x.x.x</systemitem>. Ces routes sont nécessaires pour
      que les deux autres routeurs puissent communiquer entre eux. Ces mêmes
      entrées permettent aussi aux autres systèmes d'accéder à Internet.</para>
      </listitem>
      <listitem>
      <para>Tests <acronym>ICMP</acronym> point à point sur les trois réseaux
      connectés au routeur</para>

<screen><prompt>$</prompt> ping -c2 <emphasis>192.0.2.1</emphasis>
PING 192.0.2.1 (192.0.2.1) 56(84) bytes of data.
64 bytes from 192.0.2.1: icmp_req=1 ttl=64 time=0.786 ms
64 bytes from 192.0.2.1: icmp_req=2 ttl=64 time=0.616 ms

--- 192.0.2.1 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 1001ms
rtt min/avg/max/mdev = 0.616/0.701/0.786/0.085 ms</screen>

<screen><prompt>$</prompt> ping -c2 <emphasis>192.0.2.34</emphasis>
PING 192.0.2.34 (192.0.2.34) 56(84) bytes of data.
64 bytes from 192.0.2.34: icmp_req=1 ttl=255 time=5.14 ms
64 bytes from 192.0.2.34: icmp_req=2 ttl=255 time=4.81 ms

--- 192.0.2.34 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 1001ms
rtt min/avg/max/mdev = 4.817/4.978/5.140/0.176 ms</screen>

<screen><prompt>$</prompt> ping -c2 <emphasis>192.0.2.66</emphasis>
PING 192.0.2.66 (192.0.2.66) 56(84) bytes of data.
64 bytes from 192.0.2.66: icmp_req=1 ttl=64 time=1.53 ms
64 bytes from 192.0.2.66: icmp_req=2 ttl=64 time=1.30 ms

--- 192.0.2.66 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 1002ms
rtt min/avg/max/mdev = 1.305/1.417/1.530/0.118 ms</screen>
      </listitem>
      <listitem>
      <para>Traduction d'adresses sources du trafic sortant vers l'Internet</para>

<screen><prompt>#</prompt> iptables -t nat -vL  POSTROUTING
Chain POSTROUTING (policy ACCEPT 244 packets, 55952 bytes)
 pkts bytes target      prot opt in     out     source               destination
 3937  241K MASQUERADE  all  --  any    eth0.2  anywhere             anywhere</screen>
      </listitem>
    </itemizedlist>

  <bridgehead xml:id='triangle-tls' renderas='sect2'>Le routeur
  TLS</bridgehead>

    <itemizedlist>
      <listitem>
      <para>État des interfaces réseau. L'extrait du fichier de configuration
      est donné en annexe : <xref
      linkend='site2site-ipsecvpn.interfaces.tls'/>.</para>

<screen><prompt>TLS#</prompt>sh ip int brief 
Interface                  IP-Address      OK? Method Status                Protocol
Ethernet0/0                unassigned      YES NVRAM  administratively down down
<emphasis>GigabitEthernet0/0         192.0.2.34</emphasis>      YES NVRAM  up                    up
<emphasis>GigabitEthernet1/0         10.11.0.1</emphasis>       YES NVRAM  up                    up
<emphasis>Loopback0                  10.10.0.1</emphasis>       YES NVRAM  up                    up
<emphasis>Loopback1                  10.10.1.1</emphasis>       YES NVRAM  up                    up
<emphasis>Loopback2                  10.10.2.1</emphasis>       YES NVRAM  up                    up
<emphasis>Loopback3                  10.10.3.1</emphasis>       YES NVRAM  up                    up</screen>
      </listitem>
      <listitem>
      <para>Table de routage</para>

<screen><prompt>TLS#</prompt>sh ip route
Codes: L - local, C - connected, S - static, R - RIP, M - mobile, B - BGP
       D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area 
       N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2
       E1 - OSPF external type 1, E2 - OSPF external type 2
       i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2
       ia - IS-IS inter area, * - candidate default, U - per-user static route
       o - ODR, P - periodic downloaded static route, H - NHRP, l - LISP
       + - replicated route, % - next hop override

Gateway of last resort is 192.0.2.33 to network 0.0.0.0

S*    0.0.0.0/0 [1/0] via 192.0.2.33
      10.0.0.0/8 is variably subnetted, 15 subnets, 2 masks
C        10.10.0.0/24 is directly connected, Loopback0
L        10.10.0.1/32 is directly connected, Loopback0
C        10.10.1.0/24 is directly connected, Loopback1
L        10.10.1.1/32 is directly connected, Loopback1
C        10.10.2.0/24 is directly connected, Loopback2
L        10.10.2.1/32 is directly connected, Loopback2
C        10.10.3.0/24 is directly connected, Loopback3
L        10.10.3.1/32 is directly connected, Loopback3
C        10.11.0.0/24 is directly connected, GigabitEthernet1/0
L        10.11.0.1/32 is directly connected, GigabitEthernet1/0
      192.0.2.0/24 is variably subnetted, 2 subnets, 2 masks
C        192.0.2.32/27 is directly connected, GigabitEthernet0/0
L        192.0.2.34/32 is directly connected, GigabitEthernet0/0</screen>
      </listitem>
      <listitem>
      <para>Tests <acronym>ICMP</acronym> point à point sur les réseaux
      connectés au routeur</para>

<screen><prompt>TLS#</prompt>ping <emphasis>192.0.2.33</emphasis>
Type escape sequence to abort.
Sending 5, 100-byte ICMP Echos to 192.0.2.33, timeout is 2 seconds:
!!!!!
Success rate is 100 percent (5/5), round-trip min/avg/max = 8/8/12 ms</screen>

<screen><prompt>TLS#</prompt>ping <emphasis>10.11.0.2</emphasis>
Type escape sequence to abort.
Sending 5, 100-byte ICMP Echos to 10.11.0.2, timeout is 2 seconds:
!!!!!
Success rate is 100 percent (5/5), round-trip min/avg/max = 4/10/20 ms</screen>

<screen><prompt>TLS#</prompt>ping <emphasis>10.10.0.1</emphasis>
Type escape sequence to abort.
Sending 5, 100-byte ICMP Echos to 10.10.0.1, timeout is 2 seconds:
!!!!!
Success rate is 100 percent (5/5), round-trip min/avg/max = 1/3/12 ms</screen>

<screen><prompt>TLS#</prompt>ping <emphasis>10.10.1.1</emphasis>
Type escape sequence to abort.
Sending 5, 100-byte ICMP Echos to 10.10.1.1, timeout is 2 seconds:
!!!!!
Success rate is 100 percent (5/5), round-trip min/avg/max = 1/4/12 ms</screen>

<screen><prompt>TLS#</prompt>ping <emphasis>10.10.2.1</emphasis>
Type escape sequence to abort.
Sending 5, 100-byte ICMP Echos to 10.10.2.1, timeout is 2 seconds:
!!!!!
Success rate is 100 percent (5/5), round-trip min/avg/max = 1/2/4 ms</screen>

<screen><prompt>TLS#</prompt>ping <emphasis>10.10.3.1</emphasis>
Type escape sequence to abort.
Sending 5, 100-byte ICMP Echos to 10.10.3.1, timeout is 2 seconds:
!!!!!
Success rate is 100 percent (5/5), round-trip min/avg/max = 1/3/12 ms</screen>
      </listitem>
      <listitem>
      <para>Tests <acronym>ICMP</acronym> vers le routeur <citetitle>GLA</citetitle></para>

<screen><prompt>TLS#</prompt>ping <emphasis>192.0.2.66</emphasis>
Type escape sequence to abort.
Sending 5, 100-byte ICMP Echos to 192.0.2.66, timeout is 2 seconds:
!!!!!
Success rate is 100 percent (5/5), round-trip min/avg/max = 8/11/20 ms</screen>

      <para>L'adresse <acronym>IP</acronym> destination <systemitem
      class='ipaddress'>192.0.2.66</systemitem> correspond à l'extrémité du
      tunnel à établir pour constituer la liaison
      <acronym>VPN</acronym>.</para>
      </listitem>
    </itemizedlist>

  <bridgehead xml:id='triangle-gla' renderas='sect2'>Le routeur
  GLA</bridgehead>

    <itemizedlist>
      <listitem>
      <para>État des interfaces réseau. Le fichier de configuration est donné
      en annexe : <xref linkend='site2site-ipsecvpn.interfaces.gla'/>.</para>

<screen><prompt>$</prompt> ip addr ls scope global
1: lo: &lt;LOOPBACK,UP,LOWER_UP> mtu 16436 qdisc noqueue state UNKNOWN 
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
2: <emphasis>eth0</emphasis>: &lt;BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP qlen 1000
    link/ether ba:ad:00:ca:fe:20 brd ff:ff:ff:ff:ff:ff
    inet <emphasis>192.0.2.66/27</emphasis> brd 192.0.2.95 scope global eth0
3: <emphasis>eth1</emphasis>: &lt;BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP qlen 1000
    link/ether ba:ad:00:ca:fe:21 brd ff:ff:ff:ff:ff:ff
    inet <emphasis>10.21.0.1/24</emphasis> brd 10.21.0.255 scope global eth1
4: <emphasis>dummy0</emphasis>: &lt;BROADCAST,NOARP,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN 
    link/ether da:32:1c:fa:f1:9c brd ff:ff:ff:ff:ff:ff
    inet <emphasis>10.20.0.1/24</emphasis> brd 10.20.0.255 scope global dummy0
5: <emphasis>dummy1</emphasis>: &lt;BROADCAST,NOARP,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN 
    link/ether 7a:ff:7c:26:ee:2b brd ff:ff:ff:ff:ff:ff
    inet <emphasis>10.20.1.1/24</emphasis> brd 10.20.1.255 scope global dummy1
6: <emphasis>dummy2</emphasis>: &lt;BROADCAST,NOARP,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN 
    link/ether 3a:dd:fd:c6:eb:7a brd ff:ff:ff:ff:ff:ff
    inet <emphasis>10.20.2.1/24</emphasis> brd 10.20.2.255 scope global dummy2
7: <emphasis>dummy3</emphasis>: &lt;BROADCAST,NOARP,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN 
    link/ether 06:23:20:ae:9f:ff brd ff:ff:ff:ff:ff:ff
    inet <emphasis>10.20.3.1/24</emphasis> brd 10.20.3.255 scope global dummy3</screen>
      </listitem>
      <listitem>
      <para>Table de routage</para>

<screen><prompt>$</prompt> ip route ls
default via 192.0.2.65 dev eth0 
10.20.0.0/24 dev dummy0  proto kernel  scope link  src 10.20.0.1 
10.20.1.0/24 dev dummy1  proto kernel  scope link  src 10.20.1.1 
10.20.2.0/24 dev dummy2  proto kernel  scope link  src 10.20.2.1 
10.20.3.0/24 dev dummy3  proto kernel  scope link  src 10.20.3.1 
10.21.0.0/24 dev eth1  proto kernel  scope link  src 10.21.0.1 
192.0.2.64/27 dev eth0  proto kernel  scope link  src 192.0.2.66</screen>
      </listitem>
      <listitem>
      <para>Tests <acronym>ICMP</acronym> point à point sur les réseaux
      connectés au routeur</para>

<screen><prompt>$</prompt> ping -c2 <emphasis>192.0.2.65</emphasis>
PING 192.0.2.65 (192.0.2.65) 56(84) bytes of data.
64 bytes from 192.0.2.65: icmp_req=1 ttl=64 time=1.10 ms
64 bytes from 192.0.2.65: icmp_req=2 ttl=64 time=1.27 ms

--- 192.0.2.65 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 1001ms
rtt min/avg/max/mdev = 1.106/1.190/1.275/0.091 ms</screen>

<screen><prompt>$</prompt> ping -c2 <emphasis>10.21.0.2</emphasis>
PING 10.21.0.2 (10.21.0.2) 56(84) bytes of data.
64 bytes from 10.21.0.2: icmp_req=1 ttl=64 time=1.32 ms
64 bytes from 10.21.0.2: icmp_req=2 ttl=64 time=1.24 ms

--- 10.21.0.2 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 1001ms
rtt min/avg/max/mdev = 1.247/1.284/1.322/0.051 ms</screen>

<screen><prompt>$</prompt> ping -c2 <emphasis>10.20.0.1</emphasis>
PING 10.20.0.1 (10.20.0.1) 56(84) bytes of data.
64 bytes from 10.20.0.1: icmp_req=1 ttl=64 time=0.072 ms
64 bytes from 10.20.0.1: icmp_req=2 ttl=64 time=0.089 ms

--- 10.20.0.1 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 999ms
rtt min/avg/max/mdev = 0.072/0.080/0.089/0.012 ms</screen>

<screen><prompt>$</prompt> ping -c2 <emphasis>10.20.1.1</emphasis>
PING 10.20.1.1 (10.20.1.1) 56(84) bytes of data.
64 bytes from 10.20.1.1: icmp_req=1 ttl=64 time=0.075 ms
64 bytes from 10.20.1.1: icmp_req=2 ttl=64 time=0.083 ms

--- 10.20.1.1 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 999ms
rtt min/avg/max/mdev = 0.075/0.079/0.083/0.004 ms</screen>

<screen><prompt>$</prompt> ping -c2 <emphasis>10.20.2.1</emphasis>
PING 10.20.2.1 (10.20.2.1) 56(84) bytes of data.
64 bytes from 10.20.2.1: icmp_req=1 ttl=64 time=0.089 ms
64 bytes from 10.20.2.1: icmp_req=2 ttl=64 time=0.086 ms

--- 10.20.2.1 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 999ms
rtt min/avg/max/mdev = 0.086/0.087/0.089/0.009 ms</screen>

<screen><prompt>$</prompt> ping -c2 <emphasis>10.20.3.1</emphasis>
PING 10.20.3.1 (10.20.3.1) 56(84) bytes of data.
64 bytes from 10.20.3.1: icmp_req=1 ttl=64 time=0.083 ms
64 bytes from 10.20.3.1: icmp_req=2 ttl=64 time=0.137 ms

--- 10.20.3.1 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 1000ms
rtt min/avg/max/mdev = 0.083/0.110/0.137/0.027 ms</screen>
      </listitem>
      <listitem>
      <para>Tests <acronym>ICMP</acronym> vers le routeur <citetitle>TLS</citetitle></para>

<screen><prompt>$</prompt> ping -c2 <emphasis>192.0.2.34</emphasis>
PING 192.0.2.34 (192.0.2.34) 56(84) bytes of data.
64 bytes from 192.0.2.34: icmp_req=1 ttl=254 time=14.6 ms
64 bytes from 192.0.2.34: icmp_req=2 ttl=254 time=14.1 ms

--- 192.0.2.34 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 1001ms
rtt min/avg/max/mdev = 14.188/14.418/14.648/0.230 ms</screen>

      <para>L'adresse <acronym>IP</acronym> destination <systemitem
      class='ipaddress'>192.0.2.34</systemitem> correspond à l'extrémité du
      tunnel à établir pour constituer la liaison
      <acronym>VPN</acronym>.</para>
      </listitem>
    </itemizedlist>
</section>

<section xml:id='site2site-ipsecvpn.gre-tunnel'>
  <title>Le tunnel GRE entre routeurs d'extrémité</title>

  <para>Dans cette section on configure les interfaces réseau de tunnel sur les
  routeurs <citetitle>TLS</citetitle> et <citetitle>GLA</citetitle>. Le premier
  est un routeur <trademark>Cisco</trademark> et le second un système Debian
  GNU/Linux. Les syntaxes de configuration entre les deux routeurs sont
  différentes mais les fonctionnalités sont vraiment très voisines.</para>

  <mediaobject xml:id='site2site-ipsecvpn.gre'>
    <imageobject role='fo'>
    <imagedata format='PNG' fileref='images/site2site-ipsecvpn-gre.png' width='12cm' scalefit='1' />
    </imageobject>
    <imageobject role='html'>
    <imagedata format='PNG' fileref='images/site2site-ipsecvpn-gre.png' width='640px' scalefit='1' />
    </imageobject>
    <textobject>
    <phrase>Topologie de base + tunnel GRE</phrase>
    </textobject>
  </mediaobject>

  <para>Suite aux tests de la section précédente, on sait que les deux routeurs
  d'extrémité <citetitle>GLA</citetitle> et <citetitle>TLS</citetitle> se
  joignent via <citetitle>AMS</citetitle>. On configure donc une interface
  virtuelle de tunnel sur chacune des deux extrémités.</para>

  <bridgehead xml:id='gre-gla' renderas='sect2'>Le routeur GLA</bridgehead>

  <para>Le paquet <application>iproute</application> fournit la commande
  <command>ip</command> qui contient les options de manipulation de tunnel.
  Cette commande et ces options sont appelées lors de l'initialisation de
  l'interface de tunnel sur le système Debian GNU/Linux. Voici l'extrait du
  fichier <filename>/etc/network/interfaces</filename> correspondant.</para>

<screen>auto tunnel0
iface tunnel0 inet static
        address 198.51.100.2/30<co xml:id='network'/>
        pointopoint 198.51.100.1
        pre-up ip tunnel add tunnel0 mode gre local 192.0.2.66 remote 192.0.2.34 ttl 255 pmtudisc<co xml:id='mtu'/>
        pre-up ip link set mtu 1440<coref linkend='mtu'/> dev tunnel0
        pre-up ip link set multicast on dev tunnel0
	post-up iptables -t mangle -A POSTROUTING -o tunnel0 -p tcp -m tcp --syn -j TCPMSS --set-mss 1400<co xml:id='mss'/>
	post-down iptables -t mangle -D POSTROUTING -o tunnel0 -p tcp -m tcp --syn -j TCPMSS --set-mss 1400
        post-down ip link set dev tunnel0 down
        post-down ip tunnel del tunnel0</screen>

  <bridgehead xml:id='gre-tls' renderas='sect2'>Le routeur TLS</bridgehead>

  <para>Sur le système <acronym>IOS</acronym> du routeur
  <trademark>Cisco</trademark>, une interface de tunnel se configure
  directement. Voici l'extrait du fichier de configuration
  correspondant.</para>

<screen>interface Tunnel0
 ip address 198.51.100.1<coref linkend='network'/> 255.255.255.252
 no ip redirects
 no ip proxy-arp
 ip mtu 1440<coref linkend='mtu'/>
 ip virtual-reassembly in
 ip tcp adjust-mss 1400<coref linkend='mss'/>
 tunnel source GigabitEthernet0/0
 tunnel destination 192.0.2.66
 tunnel path-mtu-discovery<coref linkend='mtu'/></screen>

  <bridgehead xml:id='gre-param' renderas='sect2'>Les paramètres communs</bridgehead>

  <calloutlist>
    <callout arearefs='network'>
    <bridgehead xml:id='gre-param-network' renderas='sect3'>Le routage</bridgehead>

    <para>Le réseau <systemitem class='ipaddress'>198.51.100.0/30</systemitem>
    est dédié au tunnel <acronym>GRE</acronym>. Une fois le tunnel en place les
    deux routeurs sont adjacents via ce réseau. Tous les paquets
    <acronym>IP</acronym> qui empruntent ce tunnel sont considérés comme ayant
    été directement transmis. L'utilisation de la commande
    <command>traceroute</command> sur les deux stations situées de part et
    d'autre du tunnel le montre bien.</para>

<screen><prompt>etu@GLA-CLNT:~$</prompt> traceroute 10.11.0.2
traceroute to 10.11.0.2 (10.11.0.2), 30 hops max, 60 byte packets
 1  10.21.0.1 (10.21.0.1)  1.327 ms  1.309 ms  1.023 ms
 2  <emphasis>198.51.100.1</emphasis> (198.51.100.1)  34.297 ms  14.241 ms  24.119 ms
 3  10.11.0.2 (10.11.0.2)  146.010 ms  166.488 ms  156.087 ms</screen>

<screen><prompt>etu@TLS-CLNT:~$</prompt> traceroute 10.21.0.2
traceroute to 10.21.0.2 (10.21.0.2), 30 hops max, 60 byte packets
 1  10.11.0.1 (10.11.0.1)  16.525 ms  6.306 ms  26.425 ms
 2  <emphasis>198.51.100.2</emphasis> (198.51.100.2)  57.387 ms  47.014 ms  67.058 ms
 3  10.21.0.2 (10.21.0.2)  87.592 ms  77.351 ms  107.881 ms</screen>

    <para>Si le tunnel <acronym>GRE</acronym> n'était pas actif, on verrait
    apparaître un saut supplémentaire via le routeur
    <citetitle>AMS</citetitle>.</para>
    </callout>
    <callout arearefs='mtu'>
    <bridgehead xml:id='gre-param-mtu' renderas='sect3'>La taille maximum de paquet</bridgehead>

    <para>La détection et/ou le réglage de la taille maximu de paquet ou
    <wordasword>Maximum Transmit Unit</wordasword> (<acronym>MTU</acronym>) est
    un point sensible dans la mise en œuvre d'un tunnel. L'utilisation du
    tunnel <acronym>GRE</acronym> génère un en-tête supplémentaire de 24
    octets. Dans ce premier cas, le calcul est simple :
    <inlineequation>
    <mathphrase>MTU = 1500 - 24 = 1476</mathphrase>
    </inlineequation>.
    C'est avec l'ajout des protocoles <acronym>IPsec</acronym> que les choses
    se compliquent sérieusement. En effet le nombre des octets utilisés pour
    l'authentification avec le protocole <acronym>ESP</acronym> est difficile à
    évaluer. C'est la raison pour laquelle on applique généralement une
    dimension fixe par configuration à chaque extrémité du tunnel. Ici, la
    valeur <keycap>1440</keycap> a été appliquée sur les deux interfaces de
    tunnel.</para>

<screen><prompt>etu@GLA-CLNT:~$</prompt> tracepath 10.11.0.2
 1:  10.21.0.2                                             0.177ms pmtu 1500
 1:  10.21.0.1                                             0.776ms 
 1:  10.21.0.1                                             0.746ms 
 2:  10.21.0.1                                             0.828ms pmtu 1440
 2:  198.51.100.1                                         14.643ms 
 3:  10.11.0.2                                            15.260ms reached
     Resume: <emphasis>pmtu 1440</emphasis> hops 3 back 62</screen>

     <para>En plus du paramétrage manuel, il est utile d'ajouter la fonction de
     découverte de la taille maximum de paquet le long du chemin entre les deux
     extrémités du tunnel. Il est possible qu'un réglage effectué par un
     opérateur tiers viennent «perturber» le schéma d'encapsulation
     initialement prévu. La commande <command>tracepath</command> fournie avec
     le paquet <application>iputils-tracepath</application> permet de contrôler
     la valeur <acronym>MTU</acronym>. La copie d'écran ci-dessus montre juste
     que les paramétrages implantés sur les deux interfaces de tunnel des
     routeurs d'extrémité sont effectifs.</para>
    </callout>
    <callout arearefs='mss'>
    <bridgehead xml:id='gre-param-mss' renderas='sect3'>L'optimisation des connexions TCP</bridgehead>

    <para>Compte tenu des multiples niveaux d'encapsulation, il est souvent
    nécessaire d'ajuster la taille maximum de segment lors du passage de la
    couche transport à la couche réseau avec le protocole
    <acronym>TCP</acronym>. Cette taille maximum de segment ou
    <wordasword>Maximum Segment Size</wordasword> (<acronym>MSS</acronym>) est
    un paramètre négocié lors de l'établissement de la connexion
    <acronym>TCP</acronym> avant l'échange de données.</para>

    <para><emphasis>Cette adaptation doit être appliquée à toute nouvelle
    connexion <acronym>TCP</acronym> engagée à travers le
    tunnel</emphasis>.</para>

    <para>Coté routeur <trademark>Cisco</trademark>, cet ajustement se fait au
    niveau de l'interface de tunnel avec la directive <emphasis><parameter>ip
    tcp adjust-mss 1400</parameter></emphasis>. La valeur <option>1400</option>
    tient compte d'une taille maximum d'en-tête <acronym>TCP</acronym> de 40
    octets.</para>
    
    <para>Côté GNU/Linux, il est nécessaire de faire appel aux outils de
    filtrage <application>netfilter/iptables</application> pour obtenir le même
    traitement. Dans l'exemple donné ci-dessus, on utilise la chaîne
    <option>POSTROUTING</option> de la table <option>mangle</option> dans
    laquelle on trouve tout ce qui concerne «l'altération» de paquet. Comme sur
    l'autre routeur, on applique la valeur <option>1400</option> au champ
    <acronym>MSS</acronym> pour toute nouvelle connexion <acronym>TCP</acronym>
    sortant par l'interface <option>tunnel0</option>.</para>
    </callout>
  </calloutlist>

  <para>Pour conclure cette section, le fichier &url.gre-tcp-iperf.pcap;
  contient une capture de trafic traversant le tunnel <acronym>GRE</acronym>.
  Elle permet de visualiser les différentes encapsulations.</para>
</section>

<section xml:id='site2site-ipsecvpn.ospf-routing'>
  <title>Le routage dynamique avec OSPF</title>

  <para>Dans cette section on configure les démons du protocole de routage
  <acronym>OSPF</acronym> de façon à ce que les routeurs
  <citetitle>TLS</citetitle> et <citetitle>GLA</citetitle> échangent leurs
  informations de routage à travers le tunnel <acronym>GRE</acronym> configuré
  lors de l'étape précédente. Là encore les deux routeurs fonctionnent avec
  deux systèmes d'exploitation différents mais les caractéristiques du
  protocole <acronym>OSPF</acronym> restent les mêmes. C'est justement le
  propre d'un protocole !</para>

  <mediaobject xml:id='site2site-ipsecvpn.ospf'>
    <imageobject role='fo'>
    <imagedata format='PNG' fileref='images/site2site-ipsecvpn-ospf.png' width='12cm' scalefit='1' />
    </imageobject>
    <imageobject role='html'>
    <imagedata format='PNG' fileref='images/site2site-ipsecvpn-ospf.png' width='640px' scalefit='1' />
    </imageobject>
    <textobject>
    <phrase>Topologie de base + tunnel GRE + routage OSPF</phrase>
    </textobject>
  </mediaobject>

  <para>Suite aux tests des deux sections précédentes, on sait que les deux
  routeurs d'extrémité sont adjacents via le réseau <acronym>IP</acronym> du
  tunnel <acronym>GRE</acronym>.</para>

  <bridgehead xml:id='ospf-gla' renderas='sect2'>Le routeur GLA</bridgehead>

  <para>Sur le système Debian GNU/Linux, on utilise le démon
  <acronym>OSPF</acronym> fourni avec la suite logicielle
  <application>frr</application>. On ne reprend pas ici les étapes
  d'installation et de configuration des démons. Les informations
  correspondantes sont données dans le documents &url.ospf-lab;.</para> 

  <para>Les points de configuration essentiels sont les suivants.</para>

  <itemizedlist>
    <listitem>
    <para>On commence par le paramétrage des bandes passantes pour chacun des
    liens dans <application>zebra</application>. Ces éléments sur les bandes
    passantes sont utilisés pour les calculs de métriques dans
    <acronym>OSPF</acronym>. Voici l'extrait du fichier
    &url.gla-zebra.conf;.</para>

<screen>!
interface dummy0
 bandwidth 8000000
 ipv6 nd suppress-ra
!
interface dummy1
 bandwidth 8000000
 ipv6 nd suppress-ra
!
interface dummy2
 bandwidth 8000000
 ipv6 nd suppress-ra
!
interface dummy3
 bandwidth 8000000
 ipv6 nd suppress-ra
!
interface eth0
 bandwidth 1000000
 ipv6 nd suppress-ra
!
interface eth1
 bandwidth 1000000
 ipv6 nd suppress-ra
!
interface tunnel0
 bandwidth 45000
 ipv6 nd suppress-ra</screen>
    </listitem>
    <listitem>
    <para>On configure ensuite le démon <acronym>OSPF</acronym>. Voici
    l'extrait du fichier &url.gla-ospfd.conf;.</para>

<screen>!
interface tunnel0
 ip ospf network point-to-point
!
router ospf
 ospf router-id 0.0.0.20
 log-adjacency-changes
! Important: ensure reference bandwidth is consistent across all routers
 auto-cost reference-bandwidth 1000
 passive-interface default
 no passive-interface tunnel0
 network 10.20.0.0/16 area 0.0.0.0
 network 10.21.0.0/24 area 0.0.0.0
 network 198.51.100.0/30 area 0.0.0.0</screen>
    </listitem>
  </itemizedlist>

  <bridgehead xml:id='ospf-tls' renderas='sect2'>Le routeur TLS</bridgehead>

  <para>Sur un routeur <trademark>Cisco</trademark>, les interfaces et les
  démons de routage se configurent dans le même fichier de configuration. Les
  calculs de métriques héritent directement des paramètres fournis par les
  composants de pilotage des interfaces réseau. Voici l'extrait du fichier
  &url.TLS-confg;</para>

<screen>!
router ospf 1
 router-id 0.0.0.10
 auto-cost reference-bandwidth 1000
 passive-interface default
 no passive-interface Tunnel0
 network 10.10.0.0 0.0.255.255 area 0
 network 10.11.0.0 0.0.0.255 area 0
 network 198.51.100.0 0.0.0.3 area 0</screen>

  <bridgehead xml:id='ospf-tests' renderas='sect2'>Les tests de
  validation</bridgehead>

  <para>Les étapes classiques de validation des échanges entre démons
  <acronym>OSPF</acronym> sont les suivantes.</para>

  <itemizedlist>
    <listitem>
    <para>Les adjacences ; les routeurs doivent se reconnaître commen
    voisins.</para>

<screen><prompt>GLA(ospfd)#</prompt> sh ip ospf neighbor 

    Neighbor ID Pri State           Dead Time Address         Interface            RXmtL RqstL DBsmL
0.0.0.10          1 <emphasis>Full/DROther</emphasis>      33.434s 198.51.100.1    <emphasis>tunnel0:198.51.100.2</emphasis>     0     0     0</screen>

<screen><prompt>TLS#</prompt>sh ip ospf neighbor 

Neighbor ID     Pri   State           Dead Time   Address         Interface
0.0.0.20          0   <emphasis>FULL/</emphasis>  -        00:00:35    198.51.100.2    <emphasis>Tunnel0</emphasis></screen>
    </listitem>
    <listitem>
    <para>Le tunnel <acronym>GRE</acronym> est vu par les deux routeurs comme
    un lien point à point.</para>

<screen><prompt>GLA(ospfd)#</prompt> sh ip ospf interface tunnel0
tunnel0 is up
  ifindex 11, MTU 1440 bytes, BW 45000 Kbit &lt;UP,<emphasis>POINTOPOINT</emphasis>,RUNNING,NOARP,MULTICAST>
  Internet Address 198.51.100.2/32, Peer 198.51.100.1, Area 0.0.0.0
  MTU mismatch detection:enabled
  Router ID 0.0.0.20, <emphasis>Network Type POINTOPOINT</emphasis>, Cost: 22
  Transmit Delay is 1 sec, State Point-To-Point, Priority 1
  No designated router on this network
  No backup designated router on this network
  Multicast group memberships: <emphasis>OSPFAllRouters</emphasis>
  Timer intervals configured, Hello 10s, Dead 40s, Wait 40s, Retransmit 5
    Hello due in 6.951s
  Neighbor Count is 1, Adjacent neighbor count is 1</screen>

<screen><prompt>TLS#sh</prompt> ip ospf interface tunnel 0
Tunnel0 is up, line protocol is up 
  Internet Address 198.51.100.1/30, Area 0, Attached via Network Statement
  Process ID 1, Router ID 0.0.0.10, <emphasis>Network Type POINT_TO_POINT</emphasis>, Cost: 22
  Topology-MTID    Cost    Disabled    Shutdown      Topology Name
        0           22        no          no            Base
  Transmit Delay is 1 sec, State <emphasis>POINT_TO_POINT</emphasis>
  Timer intervals configured, Hello 10, Dead 40, Wait 40, Retransmit 5
    oob-resync timeout 40
    Hello due in 00:00:08
  Supports Link-local Signaling (LLS)
  Cisco NSF helper support enabled
  IETF NSF helper support enabled
  Index 6/6, flood queue length 0
  Next 0x0(0)/0x0(0)
  Last flood scan length is 1, maximum is 1
  Last flood scan time is 0 msec, maximum is 4 msec
  Neighbor Count is 1, Adjacent neighbor count is 1 
    Adjacent with neighbor 0.0.0.20
  Suppress hello for 0 neighbor(s)</screen>
    </listitem>
    <listitem>
    <para>Les routes annoncées sont bien échangées.</para>

<screen><prompt>GLA(ospfd)#</prompt> sh ip ospf route 
============ OSPF network routing table ============
N    10.10.0.1/32          [23] area: 0.0.0.0
                           <emphasis>via 198.51.100.1, tunnel0</emphasis>
N    10.10.1.1/32          [23] area: 0.0.0.0
                           <emphasis>via 198.51.100.1, tunnel0</emphasis>
N    10.10.2.1/32          [23] area: 0.0.0.0
                           <emphasis>via 198.51.100.1, tunnel0</emphasis>
N    10.10.3.1/32          [23] area: 0.0.0.0
                           <emphasis>via 198.51.100.1, tunnel0</emphasis>
N    10.11.0.0/24          [23] area: 0.0.0.0
                           <emphasis>via 198.51.100.1, tunnel0</emphasis>
N    10.20.0.0/24          [1] area: 0.0.0.0
                           directly attached to dummy0
N    10.20.1.0/24          [1] area: 0.0.0.0
                           directly attached to dummy1
N    10.20.2.0/24          [1] area: 0.0.0.0
                           directly attached to dummy2
N    10.20.3.0/24          [1] area: 0.0.0.0
                           directly attached to dummy3
N    10.21.0.0/24          [1] area: 0.0.0.0
                           directly attached to eth1
N    198.51.100.0/30       [44] area: 0.0.0.0
                           <emphasis>via 198.51.100.1, tunnel0</emphasis>
N    198.51.100.1/32       [22] area: 0.0.0.0
                           directly attached to tunnel0</screen>

<screen><prompt>TLS#</prompt>sh ip ospf ro

            OSPF Router with ID (0.0.0.10) (Process ID 1)


                Base Topology (MTID 0)


    Area BACKBONE(0)

    Intra-area Route List
*   10.11.0.0/24, Intra, cost 1, area 0, Connected
      via 10.11.0.1, GigabitEthernet1/0
*>  10.20.0.0/24, Intra, cost 23, area 0
      <emphasis>via 198.51.100.2, Tunnel0</emphasis>
*>  10.20.1.0/24, Intra, cost 23, area 0
      <emphasis>via 198.51.100.2, Tunnel0</emphasis>
*>  10.20.2.0/24, Intra, cost 23, area 0
      <emphasis>via 198.51.100.2, Tunnel0</emphasis>
*>  10.20.3.0/24, Intra, cost 23, area 0
      <emphasis>via 198.51.100.2, Tunnel0</emphasis>
*>  10.21.0.0/24, Intra, cost 23, area 0
      <emphasis>via 198.51.100.2, Tunnel0</emphasis>
*   198.51.100.0/30, Intra, cost 22, area 0, Connected
      via 198.51.100.1, Tunnel0
*   10.10.0.1/32, Intra, cost 1, area 0, Connected
      via 10.10.0.1, Loopback0
*   10.10.1.1/32, Intra, cost 1, area 0, Connected
      via 10.10.1.1, Loopback1
*   10.10.2.1/32, Intra, cost 1, area 0, Connected
      via 10.10.2.1, Loopback2
*   10.10.3.1/32, Intra, cost 1, area 0, Connected
      via 10.10.3.1, Loopback3
*   198.51.100.1/32, Intra, cost 44, area 0
      via 198.51.100.2, Tunnel0</screen>

<note>
  <para>La commande <command>sh ip ospf ro</command> fait partie des fameuses
  commandes cachées et non documentées de l'<acronym>IOS</acronym>.</para>
</note>
    </listitem>
  </itemizedlist>
</section>

<section xml:id='site2site-ipsecvpn.ipsec-confg'>
  <title>La configuration IPsec</title>

  <para>Avec cette section, on touche enfin au but ! Tous les autres éléments
  de la <link linkend='site2site-ipsecvpn.dynamic-routing'>topologie
  type</link> présentée en début de document sont en place et leur bon
  fonctionnement à été validé. Il ne reste plus qu'à appliquer la configuration
  <acronym>IPsec</acronym> choisie elle aussi en début de document.</para>

  <para><emphasis>On configure <acronym>IPsec</acronym> en mode transport avec
  le protocole <acronym>ESP</acronym> entre les deux extrémités du tunnel
  <acronym>GRE</acronym>.</emphasis></para>

  <para>Comme avec le tunnel <acronym>GRE</acronym> et le protocole
  <acronym>OSPF</acronym>, il est possible de faire correspondre au plus près
  les paramètres de configuration <acronym>IPsec</acronym> entre les deux
  routeurs utilisant des systèmes d'exploitation différents.</para>

  <para>Côté <trademark>Cisco</trademark>, on fait le choix de la configuration
  appelée <option>crypto map</option> et côté Debian GNU/Linux on utilise le
  couple de paquets <application>ipsec-tools</application> /
  <application>racoon</application>. L'intérêt de ce choix réside dans le fait
  que les associations de sécurité entre les deux routeurs sont négociées entre
  interfaces «physiques» tandis que le trafic protégé est acheminé via les
  interfaces «virtuelles» de tunnel.</para>

  <bridgehead xml:id='gla-ipsec' renderas='sect2'>La configuration IPsec du
  routeur GLA</bridgehead>

  <para>Le paquet <application>ipsec-tools</application> fournit l'outil
  <command>setkey</command> qui sert à configurer les politiques de sécurité.
  Le fichier de configuration système correspondant est
  <filename>/etc/ipsec-tools.conf</filename>. En voici une copie.</para>

<screen><xi:include href='files/gla-ipsec-tools.conf' parse='text'
xmlns:xi='http://www.w3.org/2001/XInclude'/></screen>

  <para>Avec les options retenues ci-dessus, on reprend les choix effectués en
  amont.</para>
  
  <itemizedlist>
    <listitem>
    <para>On choisit adresses <acronym>IP</acronym> entre lesquelles les
    associations de sécurité sont établies pour chaque sens de trafic : entrant
    (<option>in</option>) ou sortant (<option>out</option>). Ces adresses
    <acronym>IP</acronym> correspondent aux interfaces physiques des deux
    routeurs. Voir le schéma de la <link
    linkend='site2site-ipsecvpn.topology'>topologie type</link>.</para>
    </listitem>
    <listitem>
    <para>Le protocole <acronym>ESP</acronym> a été retenu après étude de
    l'encapsulation. Voir le graphique sur <link
    linkend='site2site-ipsecvpn.gre-over-ipsec'>L'encapsulation
    <acronym>GRE</acronym> + <acronym>IPsec</acronym></link>. Cette
    représentation montre que le protocole <acronym>AH</acronym> ne présente
    aucun intérêt dans ce contexte puisque la totalité du paquet (en-tête +
    charge utile) est «traité» par <acronym>ESP</acronym> lorsqu'il est
    encapsulé dans un tunnel <acronym>GRE</acronym>. Le protocole
    <acronym>ESP</acronym> assure à lui seul les trois fonctions de la <link
    linkend='ipsec-cia'>triade <acronym>CIA</acronym></link>.</para>
    </listitem>
    <listitem>
    <para>Le mode transport a aussi été choisi après étude de l'encapsulation.
    Le mode tunnel a été éliminé parce qu'il ne peut acheminer que du trafic
    unicast alors que l'on utilise un protocole de routage dynamique et que
    tous les échanges entre instances de routage se font à l'aide de trafic
    multicast. De plus, dans notre contexte, les extrémités de tunnel
    <acronym>GRE</acronym> coïncident avec les extrémités d'association de
    sécurité <acronym>IPsec</acronym>.</para>
    </listitem>
  </itemizedlist>

  <para>Le paquet <application>racoon</application> fournit un démon qui gère
  toutes les <link linkend='ipsec-ike'>phases d'échanges de clé
  <acronym>IKE</acronym></link>. Le paramètrage des phases
  <acronym>IKEv1</acronym> est défini dans le fichier système
  <filename>/etc/racoon/racoon.conf</filename> dont voici une copie.</para>


<screen><xi:include href='files/gla-racoon.conf' parse='text'
xmlns:xi='http://www.w3.org/2001/XInclude'/></screen>

  <para>Le choix des différents algorithmes est certainement le point le plus
  délicat de la configuration entre systèmes hétérogènes. Il faut rechercher
  «l'intersection» entre les critères de bonnes pratiques en matière de
  sécurité et les contraintes d'interopérabilité entre systèmes hétérogènes. La
  copie de fichier ci-dessus reflète bien le compromis adopté avec des points
  positifs et des point négatifs.</para>
  
  <bridgehead xml:id='gla-ipsec-ike-phase1' renderas='sect3'>La phase 1
  IKE</bridgehead>

  <itemizedlist>
    <listitem>
    <para>Point négatif : <literal>proposal_check obey;</literal></para>
    
    <para>Il aurait été préférable de pouvoir faire une correspondance exacte
    dans la négociation de la phase 1 <acronym>IKE</acronym>. Or, la version
    utilisée du paquet <application>ipsec-tools</application> ne supporte pas
    le paramètre <option>lifebyte</option>. Le compromis consiste donc à
    admettre les paramètres proposés par le routeur
    <trademark>Cisco</trademark>.</para>
    </listitem>
    <listitem>
    <para>Point positif : <literal>encryption_algorithm aes 256;</literal></para>

    <para>Les deux systèmes permettent de suivre les recommandations sur
    l'utilisation de l'agorithme de chiffrement <acronym>AES</acronym>. Le
    volet confidentialité est donc correctement traité (lettre
    <keycap>C</keycap> de la <link linkend='ipsec-cia'>triade
    <acronym>CIA</acronym></link>). Voir le document RFC 4722.</para> 
    </listitem>
    <listitem>
    <para>Point négatif : <literal>hash_algorithm md5;</literal></para>

    <para>Avec ce choix d'algorithme de hachage et authentification, on
    privilégie la charge <acronym>CPU</acronym> au détriment de la sécurité. En
    effet, l'algorithme <acronym>SHA-256</acronym> fait partie des
    recommandations actuelles alors que <acronym>MD5</acronym> n'est plus
    considéré comme totalement sûr. Ce dernier algorithme consomme cependant
    nettement moins de cycles processeur.</para>

    <para>Du point de vue interopérabilité, <emphasis>tous les tests effectués
    avec les algorithmes <acronym>SHA</acronym> en phase 1
    <acronym>IKE</acronym> ont échoué lors de la préparation de ce
    document</emphasis>. Avec la version de  <application>racoon</application>
    utilisée, le premier tunnel de protection des échanges de clés ne s'établit
    pas et toute association de sécurité devient impossible à mettre en
    œuvre.</para>
    </listitem>
    <listitem>
    <para>Point négatif : <literal>authentication_method pre_shared_key;</literal></para>

    <para>Ce choix de méthode d'authentification suppose que la <emphasis>clé
    secrète doit rester secrète</emphasis>. En effet, le niveau de sécurité ne
    dépend pas des algorithmes mais du secret qui sert à initier leurs
    traitements. Dans le contexte de ce document, le même secret est déposé
    manuellement sur les deux routeurs d'extrémité. Si un de ces équipement
    venait à être volé ou compromis, le secret le serait aussi.</para>

    <para>Il serait donc préférable d'utiliser un couple clé publique / clé
    privée propre à chaque extrémité. Une autorité de certification
    (<acronym>CA</acronym>) jouerait le rôle de tiers de confiance et
    permettrait de s'assurer de l'identité des équipements en communication.
    Dans notre cas, le <acronym>VPN</acronym> est établi entre les routeurs de
    deux sites distants. La sécurité repose donc sur la solidité des systèmes
    d'exploitation et sur la sécurisation des accès aux locaux
    techniques.</para>
    </listitem>
    <listitem>
    <para>Point positif : <literal>dh_group 14;</literal></para>

    <para><link linkend='ipsec.dh'>L'échange de clé Diffie-Hellman</link>
    utilise des groupes de 2048 bits pour protéger les échanges entre les deux
    extrémité. Cette configuration suit les recommandations en vigueur.</para>
    </listitem>
  </itemizedlist>
  
  <bridgehead xml:id='gla-ipsec-ike-phase2' renderas='sect3'>La phase 2
  IKE</bridgehead>
</section>

<section xml:id='site2site-ipsecvpn.conclusion'>
  <title>Pour conclure</title>

  <para>Cet article est une illustration de quelques notions de routage avancé
  avec quatre instances de machines virtuelles. Il peut paraître un peu long ;
  comme la plupart des documents publiés sur
  <citetitle>inetdoc.net</citetitle>. Il se distingue cependant par le fait
  qu'à chaque élément de configuration avancé, on précise la démarche suivie
  pour caractériser la fonction implantée et on donne un extrait des résultats
  obtenus.</para>

  <para>Même s'il est question de routage «avancé», la section sur la
  répartition de trafic illustre parfaitement le cours sur les modélisations.
  On caractérise le fait que chaque paquet <acronym>IP</acronym> peut suivre un
  chemin propre au niveau réseau tout en préservant une connexion de bout en
  bout au niveau transport. On retrouve ainsi les notions de réseau à
  commutation de paquets et de protocole orienté connexion.</para>

  <para>Le marquage de paquets et l'enregistrement des communications sont
  aussi très intéressants et montrent qu'il est possible d'utiliser ces
  mécanismes sans nécessairement avoir recours à la traduction d'adresses.
  Sujet au combien polémique.</para>

  <para>Enfin, l'architecture étudiée n'est qu'un exemple de ce qu'il est
  possible de faire avec des systèmes GNU/Linux. Il existe bien d'autres
  solutions ou variations pour aboutir au même résultat !</para>
</section>

<section xml:id='site2site-ipsecvpn.refdocs'>
  <title>Les documents de référence</title>

  <para>Voici une liste de liens vers les principaux documents utilisés pour
  construire cet article. En vis-à-vis de chaque lien, on trouve le(s)
  «point(s) essentiel(s)».</para>

  <itemizedlist>
    <listitem>
    <para>&url.ipsec-illustrated; : Représentations graphiques détaillées sur
    les différentes encapsulation <acronym>IPsec</acronym>.</para>
    </listitem>
    <listitem>
    <para>&url.nist-800-77; : Présentations des phases <acronym>IKE</acronym>
    et analyse de l'encapsulation avec <citetitle>WireShark</citetitle>. Étude
    de cas pratiques avec exemples de configurations ; utilisation de
    <application>isakmpd</application> notamment.</para>
    </listitem>
    <listitem>
    <para>&url.cisco-p2p-gre; : Argumentation sur le choix entre les modes
    tunnel et transport.</para>
    </listitem>
  </itemizedlist>
</section>

<?custom-pagebreak?>
<appendix xml:id='site2site-ipsecvpn.interfaces'>
  <title>Configuration des interfaces</title>

  <para>Pour les systèmes Debian GNU/Linux, on donne ci-dessous une copie du
  ficher <filename>/etc/network/interfaces</filename> tandis que pour le
  routeur <trademark>Cisco</trademark> on donne un extrait du fichier de
  configuration.</para>

  <variablelist>
    <varlistentry xml:id='site2site-ipsecvpn.interfaces.ams'>
      <term>Routeur <systemitem class='systemname'>AMS</systemitem></term>
      <listitem>
<screen width='80'>&ams-interfaces;</screen>
      </listitem>
    </varlistentry>
    <varlistentry xml:id='site2site-ipsecvpn.interfaces.gla'>
      <term>Routeur <systemitem class='systemname'>GLA</systemitem></term>
      <listitem>
<screen width='80'>&gla-interfaces;</screen>
      </listitem>
    </varlistentry>
    <varlistentry xml:id='site2site-ipsecvpn.interfaces.tls'>
      <term>Routeur <systemitem class='systemname'>TLS</systemitem></term>
      <listitem>
<screen width='80'>&tls-interfaces;</screen>
      </listitem>
    </varlistentry>
  </variablelist>
</appendix>

<?custom-pagebreak?>
<appendix xml:id='site2site-ipsecvpn.vde'>
  <title>Configuration de la commutation</title>


<!--
-->
  <para>Les interfaces réseau des instances de systèmes virtualisés sont un
  brassées sur une instance de commutateur, virtuel lui aussi,
  <citetitle>vde</citetitle>. Ce commutateur est fourni par le paquet
  <systemitem>vde2</systemitem> et il est lancé lors de l'initialisation de
  l'interface <option>tap0</option> sur le système hôte. Voici un extrait du
  fichier <filename>/etc/network/interfaces</filename>.</para>

<screen width='80'>auto tap0
iface tap0 inet static
        address 192.0.2.1
        netmask 255.255.255.192
        network 192.0.2.0
        broadcast 192.0.2.63
        vde2-switch -</screen>

  <table frame='all'>
    <title>Brassage commutateur virtuel</title>
  <tgroup cols='4' align='left' colsep='1' rowsep='1'>
  <colspec colname='c1'/>
  <colspec colname='c2'/>
  <colspec colname='c3'/>
  <colspec colname='c4'/>
  <thead>
    <row>
      <entry align='center'>Port VDE</entry>
      <entry align='center'>Hôte</entry>
      <entry align='center'>Interface(s)</entry>
      <entry align='center'>Liaison</entry>
    </row>
  </thead>
  <tbody>
    <row>
      <entry>1</entry>
      <entry>Système hôte</entry>
      <entry>tap0</entry>
      <entry>commutateur vde</entry>
    </row>
    <row>
      <entry>2</entry>
      <entry>ISP</entry>
      <entry>eth0</entry>
      <entry>système hôte | Internet</entry>
    </row>
    <row>
      <entry morerows='1'>3</entry>
      <entry morerows='1'>ISP</entry>
      <entry>eth1.101</entry>
      <entry>link101</entry>
    </row>
    <row>
      <entry>eth1.103</entry>
      <entry>link103</entry>
    </row>
    <row>
      <entry morerows='2'>4</entry>
      <entry morerows='2'>R1</entry>
      <entry>eth0.101</entry>
      <entry>link101</entry>
    </row>
    <row>
      <entry>eth0.13</entry>
      <entry>trunk R1 + R3</entry>
    </row>
    <row>
      <entry>eth0.12</entry>
      <entry>trunk R1 + R2</entry>
    </row>
    <row>
      <entry morerows='2'>5</entry>
      <entry morerows='2'>R2</entry>
      <entry>eth0</entry>
      <entry>host</entry>
    </row>
    <row>
      <entry>eth0.12</entry>
      <entry>trunk R2 + R1</entry>
    </row>
    <row>
      <entry>eth0.23</entry>
      <entry>trunk R2 + R3</entry>
    </row>
    <row>
      <entry morerows='2'>6</entry>
      <entry morerows='2'>R3</entry>
      <entry>eth0.103</entry>
      <entry>link103</entry>
    </row>
    <row>
      <entry>eth0.13</entry>
      <entry>trunk R3 + R1</entry>
    </row>
    <row>
      <entry>eth0.23</entry>
      <entry>trunk R3 + R2</entry>
    </row>
    <row>
      <entry>7</entry>
      <entry>host</entry>
      <entry>eth0</entry>
      <entry>R2</entry>
    </row>
  </tbody>
  </tgroup>
  </table>

  <para>Le fichier de configuration à charger au lancement du commutateur se
  présente comme suit.</para>

</appendix>
</article>
