<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE article [

<!ENTITY phl        SYSTEM "author.xml">
<!ENTITY legal      SYSTEM "legal.xml">

<!ENTITY % inetdoc_urls SYSTEM 'inetdoc.urls.xml'>
%inetdoc_urls;

<!ENTITY % rfc_urls SYSTEM 'rfc.urls.xml'>
%rfc_urls;

<!ENTITY url.ovs
    '<link xmlns="http://docbook.org/ns/docbook"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xlink:href="http://openvswitch.org/"><citetitle>Open
     vSwitch</citetitle></link>'>

<!ENTITY url.cam
    '<link xmlns="http://docbook.org/ns/docbook"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xlink:href="https://en.wikipedia.org/wiki/Content-addressable_memory"><citetitle>Content-addressable
     memory</citetitle></link>'>

<!ENTITY url.svi
    '<link xmlns="http://docbook.org/ns/docbook"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xlink:href="https://en.wikipedia.org/wiki/Switch_virtual_interface"><citetitle>Switch
     virtual interface</citetitle></link>'>

<!ENTITY url.ieee802.1q.standard
    '<link xmlns="http://docbook.org/ns/docbook"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xlink:href="http://standards.ieee.org/getieee802/download/802.1Q-1998.pdf"><citetitle>IEEE
     802.1Q Standard</citetitle></link>'>
]>

<article xmlns="http://docbook.org/ns/docbook" version="5.0"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xml:id="inter-vlan-routing-openvswitch" xml:lang="fr">

<info>
	<title>Routage inter-VLAN avec Open vSwitch</title>

	&phl;
	<abstract>
	<para>
		<informaltable frame='none' pgwide='1'>
		<tgroup cols='2' align='left' colsep='0' rowsep='0'>
		<colspec colwidth='5*'/>
		<colspec colwidth='200px'/>
		<tbody>
		<row>
		<entry valign='top'>
			<para>L'usage des commutateurs virtuels se développe très
			rapidement avec l'augmentation tout aussi rapide du nombre
			d'instances de machines virtuelles ou de conteneurs hébergés sur un
			même système hôte physique. En fait, les besoins en commutation de
			circuits et de paquets sont toujours présents que l'on utilise des
			équipements physiques ou des systèmes virtuels. Cet article
			présente deux maquettes réduites au strict minimum qui permettent
			d'illustrer l'utilisation du commutateur virtuel <citetitle>Open
			vSwitch</citetitle> dans un contexte de routage inter-VLAN. Le
			parti pris des manipulations est de reproduire à l'identique les
			opérations que l'on réaliserait sur des équipements réels.</para>
		</entry>
		<entry>
			<inlinemediaobject>
			<imageobject role='html'>
			<imagedata fileref='images/ovs-image.jpg' format='JPG' width='200px' scalefit='1'/>
			</imageobject>
			<imageobject role='fo'>
			<imagedata fileref='images/ovs-image.jpg' format='JPG' width='4cm' scalefit='1'/>
			</imageobject>
			</inlinemediaobject>
		</entry>
		</row>
		</tbody>
		</tgroup>
		</informaltable>
	</para>
	</abstract>
	<keywordset>
		<keyword>8021q</keyword>
		<keyword>dot1q</keyword>
		<keyword>frame</keyword>
		<keyword>openvswitch</keyword>
		<keyword>route</keyword>
		<keyword>routage</keyword>
		<keyword>routing</keyword>
		<keyword>tag</keyword>
		<keyword>trunk</keyword>
		<keyword>switching</keyword>
		<keyword>vlan</keyword>
	</keywordset>
</info>

<?custom-pagebreak?>
<section xml:id='inter-vlan-routing-openvswitch.legal.meta'>
	&legal;
	<section xml:id='inter-vlan-routing-openvswitch.meta'>
		<title>Méta-information</title>

	<para>Cet article est écrit avec <link
	xlink:href="http://www.docbook.org"><citetitle>DocBook</citetitle></link>
	XML sur un système <link
	xlink:href="https://www.debian.org"><citetitle>Debian
	GNU/Linux</citetitle></link>. Il est disponible en version imprimable au
	format PDF : <link
	xlink:href="/pdf/__printbasename__"><literal>__printbasename__</literal></link>.</para>
	</section>
</section>

<?custom-pagebreak?>
<section xml:id='inter-vlan-routing-openvswitch.context'>
	<title>Le contexte : la maquette et les topologies types</title>

	<para>Comme annoncé en introduction, on cherche à illustrer les fonctions
	réseau classiques de commutation de circuits et de paquets. Par définition,
	la commutation de circuits est le propre d'un commutateur tandis que la
	commutation de paquets est le propre d'un routeur. Sur des équipements
	réels, un routeur se distingue d'un commutateur par l'électronique de ses
	interfaces. Non seulement cette électronique sert à l'interconnexion entre
	réseaux hétérogènes mais elle offre aussi des fonctions de qualité de
	service (<acronym>QoS</acronym>) plus sophistiquées. L'électronique d'un
	commutateur permet de constituer un très grand nombre de circuits
	<wordasword>full-duplex</wordasword> entre interfaces Ethernet. Si un
	commutateur assure la fonction de routage, celle-ci revient à
	interconnecter des réseaux homogènes puisque toutes ses interfaces sont de
	type Ethernet.</para>

	<para>Toujours sur des équipements réels modernes, la commutation de
	paquets et la commutation de circuits se font grâce à des composants qui
	manipulent un type de mémoire particulier appelé &url.cam;. Ces composants
	permettent d'accélérer considérablement la transmission des données en
	utilisant un algorithme de hachage des informations contenues dans les
	en-têtes de trames et de paquets. Plutôt que suivre le processus de
	désencapsulation normal qui consiste à analyser tous les champs des
	en-têtes de chaque couche, on se contente de comparer des valeurs binaires
	calculées à partir du flux réseau entrant et d'un flux antérieur. Si un
	flux arrive sur une interface avec les mêmes propriétés qu'un flux
	antérieur (adresses <acronym>MAC</acronym>, étiquette
	<acronym>IEEE802.1Q</acronym>, adresses <acronym>IP</acronym>, etc.) pour
	lequel la décision de commutation a déjà été prise, il n'est pas nécessaire
	de reprendre l'examen des en-têtes.</para>

	<para>Dans un contexte de virtualisation, les besoins sont exactement les
	mêmes. Si le système hôte ne dispose pas (encore) de mémoire
	<acronym>TCAM</acronym>, il est tout à fait possible d'utiliser les mêmes
	algorithmes de hachage dans le sous-système réseau du noyau pour atteindre
	le même objectif d'accélération des transmissions entre interfaces. C'est
	ici qu'il faut mettre un bémol, la comparaison des résultats de hachage et
	la transmission ne se font plus à la «vitesse du silicium» du composant
	spécialisé mais à la vitesse d'accès à la mémoire vive
	(<acronym>RAM</acronym>) et aux interfaces réseau du système hôte. Or, une
	interface réseau de serveur aussi performante soit elle, ne pourra garantir
	un très grand nombre de circuits <wordasword>full-duplex</wordasword>.
	C'est là que se situe le goulot d'étranglement dans les transmissions
	réseau entre le monde virtuel et le monde réel.</para>

	<mediaobject>
	<imageobject role='fo'>
		<imagedata format='PNG' fileref='images/ovs-vm.png' width='11cm'
			scalefit='1' align='center' />
	</imageobject>
	<imageobject role='html'>
		<imagedata format='PNG' fileref='images/ovs-vm.png' width='480px'
			scalefit='1' align='center' />
	</imageobject>
	</mediaobject>

	<para>Le rôle du commutateur virtuel &url.ovs; est justement de gérer les
	commutations de circuits et de paquets en coopération avec le sous-système
	réseau du noyau Linux du système hôte. Ses performances dépendent donc
	directement des composants disponibles sur le système hôte. Dans le
	contexte de cet article, il présente un avantage indéniable, il se manipule
	exactement comme un commutateur réel. Voyons les schémas de topologies
	types étudiées.</para>

	<para>Dans le premier exemple, la fonction de routage (commutation de
	paquets) est assurée directement par le système hôte.</para>

	<mediaobject xml:id='inter-vlan-routing-openvswitch.context.mockup1'>
	<imageobject role='fo'>
		<imagedata format='PNG'
			fileref='images/inter-vlan-routing-ovs-host.png' width='11cm'
			scalefit='1' align='center' />
	</imageobject>
	<imageobject role='html'>
		<imagedata format='PNG'
			fileref='images/inter-vlan-routing-ovs-host.png' width='480px'
			scalefit='1' align='center' />
	</imageobject>
	</mediaobject>

	<para>Dans le second exemple, la fonction de routage (commutation de
	paquets) est assurée par une instance de système virtuel. De plus, on
	illustre la cascade (<wordasword>stacking</wordasword>) entre commutateurs
	virtuels.</para>

	<mediaobject xml:id='inter-vlan-routing-openvswitch.context.mockup2'>
	<imageobject role='fo'>
		<imagedata format='PNG'
			fileref='images/inter-vlan-routing-ovs-internal.png' width='11cm'
			scalefit='1' align='center' />
	</imageobject>
	<imageobject role='html'>
		<imagedata format='PNG'
			fileref='images/inter-vlan-routing-ovs-internal.png' width='480px'
			scalefit='1' align='center' />
	</imageobject>
	</mediaobject>
</section>

<?custom-pagebreak?>
<section xml:id='inter-vlan-routing-openvswitch.setup'>
	<title>Préparartion du système hôte</title>

	<para>Avant de débuter les manipulations, on doit s'assurer que le système
		hôte dispose de tous les éléments nécessaires.</para>

	<orderedlist>
	<listitem><para>Les fonctions matérielles de virtualisation sur le
		processeur</para></listitem>
	<listitem><para>Les outils utilisateurs pour la virtualisation et la
			commutation</para></listitem>
	<listitem><para>L'attribution des droits d'accès à la virtualisation pour
			un utilisateur normal</para></listitem>
	</orderedlist>

	<itemizedlist>
	<listitem>
	<para>Pour vérifier que le processeur du système hôte dispose bien des
		fonctions de paravirtualisation, il faut consulter la liste des
		attributs du processeur. Il existe au moins deux solutions illustrées
		dans les deux copies d'écran suivantes.</para>

<screen><prompt>$</prompt> egrep -o -m1 '(vmx|svm)' /proc/cpuinfo
<emphasis>vmx</emphasis></screen>

<screen><prompt>$</prompt> lscpu | grep -i virtualisation
Virtualisation :        <emphasis>VT-x</emphasis></screen>
	</listitem>
	<listitem>
	<para>Pour les outils utilisateurs, au moins deux paquets sont nécessaires
		pour la virtualisation et la commutation.</para>

<screen><prompt>$</prompt> aptitude search '?or(?installed(qemu-system-x86), ?installed(openvswitch-switch))'
i   <emphasis>openvswitch-switch</emphasis>     - Open vSwitch switch implementations
i   <emphasis>qemu-system-x86</emphasis>        - QEMU full system emulation binaries (x86)</screen>

	<para>Si l'exécution de la commande proposée dans la copie d'écran
		ci-dessus ne produit aucun résultat, il faut donc procéder à
		l'installation des deux paquets.</para>

<screen><prompt>$</prompt> sudo aptitude install openvswitch-switch qemu-system-x86</screen>
	</listitem>
	<listitem>
	<para>Pour l'attribution des droits et permissions, il faut s'assurer que
		l'utilisateur normal soit bien membre des groupes système suivants
		:</para>
	<itemizedlist>
	<listitem>
	<para><systemitem>kvm</systemitem> pour la virtualisation</para>
	</listitem>
	<listitem>
	<para><systemitem>sudo</systemitem> pour la commutation</para>
	</listitem>
	</itemizedlist>

<screen><prompt>#</prompt> adduser etu kvm</screen>

<warning>
	<para>L'appartenance à un nouveau groupe est conditionnée par une ouverture
		de nouvelle session. Après avoir utilisé la commande
		<command>adduser</command> de la copie d'écran ci-dessus, il est
		préférable de déconnecter/reconnecter l'utilisateur normal du
		système.</para>
</warning>

	<para>Enfin, il faut s'assurer que les fichiers de représentation des
		périphériques aient aussi les bonnes attributions de groupe
		système.</para>

<screen><prompt>$</prompt> ls -l /dev/kvm
crw-rw---- 1 root kvm 10, 232 mars  13 19:50 /dev/kvm
<prompt>$</prompt> ls -l /dev/vhost-net
crw-rw---- 1 root kvm 10, 238 mars   8 08:21 /dev/vhost-net</screen>
	</listitem>
	</itemizedlist>
</section>

<?custom-pagebreak?>
<section xml:id='inter-vlan-routing-openvswitch.ovs-host'>
	<title>Routage inter-VLAN dans le système hôte</title>

	<para>Dans ce premier exemple, toutes les décisions d'acheminement du
	trafic sont prises dans le sous-système réseau du système hôte. Au niveau
	commutation de circuits et de paquets, c'est &url.ovs; qui joue le rôle le
	plus important. Si on se réfère au <link
	linkend='inter-vlan-routing-openvswitch.context.mockup1'>Schéma de la
	topologie</link>, l'essentiel de la configuration porte sur le commutateur
	<systemitem>dsw-host</systemitem>. Voyons par quelles étapes il faut
	passer.</para>

	<section xml:id='inter-vlan-routing-openvswitch.ovs-host.addressing'>
		<title>Plan d'adressage</title>

	<table xml:id='mockup1.perimeter.addressing' frame='all' pgwide='1'>
		<title>plan d'adressage des périmètres</title>
	<tgroup cols='4'>
	<colspec colnum='1' colwidth='1*'/>
	<colspec colnum='2' colwidth='1*'/>
	<colspec colnum='3' colwidth='1*'/>
	<colspec colnum='4' colwidth='3*'/>
	<thead>
	<row>
		<?dbfo bgcolor="#333" ?>
		<?dbfo color="#fff" ?>
		<entry>Nom</entry>
		<entry>VLAN</entry>
		<entry>Interface</entry>
		<entry>Préfixe réseau IP</entry>
	</row>
	</thead>
	<tbody>
	<row>
		<entry morerows='1' valign='middle'><citetitle>Système hôte</citetitle></entry>
		<entry morerows='1' valign='middle'>trunk</entry>
		<entry morerows='1' valign='middle'>vlan1</entry>
		<entry><systemitem class='ipaddress'>192.0.2.0/26</systemitem></entry>
	</row>
	<row>
		<entry><systemitem class='ipaddress'>2001:db8:fe00:8175::/64</systemitem></entry>
	</row>
	<row>
		<entry morerows='1' valign='middle'><citetitle>Orange</citetitle></entry>
		<entry morerows='1' valign='middle'>10</entry>
		<entry morerows='1' valign='middle'>vlan10</entry>
		<entry><systemitem class='ipaddress'>198.51.100.0/24</systemitem></entry>
	</row>
	<row>
		<entry><systemitem class='ipaddress'>fd6e:c073:b4a3:a::/64</systemitem></entry>
	</row>
	<row>
		<entry morerows='1' valign='middle'><citetitle>Vert</citetitle></entry>
		<entry morerows='1' valign='middle'>20</entry>
		<entry morerows='1' valign='middle'>vlan20</entry>
		<entry><systemitem class='ipaddress'>203.0.113.0/24</systemitem></entry>
	</row>
	<row>
		<entry><systemitem class='ipaddress'>fd6e:c073:b4a3:14::/64</systemitem></entry>
	</row>
	</tbody>
	</tgroup>
	</table>

	<note>
	<para>Les préfixes réseau <acronym>IPv4</acronym> des trois
	<acronym>VLAN</acronym>s appartiennent à la catégorie
	<citetitle>TESTNET</citetitle> définie dans le document
	&url.rfc5737;.</para>

	<para>Les préfixes réseau <acronym>IPv6</acronym> des deux
	<acronym>VLAN</acronym>s <systemitem>Orange</systemitem> et
	<systemitem>Vert</systemitem> appartiennent à la famille
	<acronym>ULA</acronym> définie dans le document &url.rfc4193;. Le préfixe
	de départ retenu est le <systemitem
	class='ipaddress'>fd00::/8</systemitem>. On lui adjoint une chaîne de 40
	bits aléatoires obtenus à l'aide de la commande
	<userinput><prompt>$</prompt> openssl rand -hex 5</userinput> pour arriver
	au préfixe <systemitem class='ipaddress'>fd6e:c073:b4a3::/48</systemitem>.
	Enfin, on utilise les numéros de <acronym>VLAN</acronym>s pour obtenir les
	préfixes réseau sur 64 bits.</para>
	</note>
	</section>

<?custom-pagebreak?>
	<section xml:id='inter-vlan-routing-openvswitch.ovs-host.tap-switch'>
		<title>Commutateur et cordons de brassage</title>

	<para>Une fois que les paquets nécessaires à la configuration sont
	installés, on peut passer au changement de configuration de l'interface
	réseau. On désactive l'interface <option>eth0</option> avant de l'associer
	au commutateur.</para>

	<orderedlist>
	<listitem>
		<para>Désactivation de l'interface physique du système hôte.</para>

<screen><prompt>$</prompt> sudo ifdown eth0</screen>
	</listitem>
	<listitem>
		<para>Création du commutateur <systemitem>dsw-host</systemitem>.</para>

<screen><prompt>$</prompt> sudo ovs-vsctl add-br dsw-host</screen>
	</listitem>
	<listitem>
		<para>Brassage de l'interface physique du système hôte sur le
		commutateur <systemitem>dsw-host</systemitem>.</para>

<screen><prompt>$</prompt> sudo ovs-vsctl add-port dsw-host eth0</screen>

		<para>Activation de l'interface physique au niveau liaison.</para>

<screen><prompt>$</prompt> sudo ip link set dev eth0 up</screen>
	</listitem>
	<listitem>
		<para>Création et «activation» des deux cordons de brassage associés
		aux instances de machines virtuelles.</para>

<screen><prompt>$</prompt> sudo ip tuntap add mode tap dev tap0 group kvm multi_queue
<prompt>$</prompt> sudo ip link set dev tap0 up
<prompt>$</prompt> sudo ip tuntap add mode tap dev tap1 group kvm multi_queue
<prompt>$</prompt> sudo ip link set dev tap1 up</screen>
	</listitem>
	<listitem>
		<para>Raccordement des cordons de brassage au commutateur.</para>

<screen><prompt>$</prompt> sudo ovs-vsctl add-port dsw-host tap0 tag=10
<prompt>$</prompt> sudo ovs-vsctl set port tap0 vlan_mode=access
<prompt>$</prompt> sudo ovs-vsctl add-port dsw-host tap1 tag=20
<prompt>$</prompt> sudo ovs-vsctl set port tap1 vlan_mode=access</screen>
	</listitem>
	</orderedlist>
	</section>

	<section xml:id='inter-vlan-routing-openvswitch.ovs-host.svi'>
		<title>Création des interfaces de type SVI</title>

	<para>Une fois la partie commutation de circuits en place, on s'intéresse
	maintenant au routage des paquets dans le sous-système réseau du système
	hôte. On utilise ici des interfaces logicielles de routage appelées
	&url.svi; que l'on configure sur le commutateur
	<systemitem>dsw-host</systemitem>.</para>

	<orderedlist>
	<listitem>
		<para>Création de l'interface principale du système hôte :
		<option>vlan1</option>.</para>

<screen><prompt>$</prompt> sudo ovs-vsctl add-port dsw-host vlan1 -- set interface vlan1 type=internal
<prompt>$</prompt> sudo ovs-vsctl set port vlan1 vlan_mode=native-untagged
<prompt>$</prompt> sudo ip addr add 192.0.2.29/26 brd + dev vlan1
<prompt>$</prompt> sudo ip -6 addr add 2001:db8:fe00:8175::1d/64 dev vlan1
<prompt>$</prompt> sudo ip link set dev vlan1 up</screen>

		<para>La dernière instruction associe l'interface au
		<acronym>VLAN</acronym> natif d'une interface en mode
		<wordasword>trunk</wordasword>. Toutes les trames sans étiquette
		<acronym>IEEE 802.1q</acronym> circulant dans un
		<wordasword>trunk</wordasword> appartiennent au <acronym>VLAN</acronym>
		natif.</para>

		<para>Une fois configurée au niveau réseau, cette interface fournit les
		informations suivantes.</para>

<screen><prompt>$</prompt> ip addr ls dev vlan1
4: vlan1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN group default
    link/ether 4a:cb:5b:38:d2:c2 brd ff:ff:ff:ff:ff:ff
    <emphasis>inet 192.0.2.29/26</emphasis> brd 192.0.2.31 scope global vlan1
       valid_lft forever preferred_lft forever
    <emphasis>inet6 2001:db8:fe00:8175::1d/64</emphasis> scope global mngtmpaddr dynamic
       valid_lft 85994sec preferred_lft 13994sec
    inet6 fe80::48cb:5bff:fe38:d2c2/64 scope link
       valid_lft forever preferred_lft forever</screen>
	</listitem>
	<listitem>
		<para>Création de l'interface <acronym>SVI</acronym> du
		<acronym>VLAN</acronym> Orange.</para>

<screen><prompt>$</prompt> sudo ovs-vsctl add-port dsw-host vlan10 tag=10 -- set interface vlan10 type=internal
<prompt>$</prompt> sudo ovs-vsctl set port vlan10 vlan_mode=access
<prompt>$</prompt> sudo ip addr add 198.51.100.1/24 brd + dev vlan10
<prompt>$</prompt> sudo ip -6 addr add fd6e:c073:b4a3:a::1/64 dev vlan10
<prompt>$</prompt> sudo ip link set dev vlan10 up</screen>
	</listitem>
	<listitem>
		<para>Création de l'interface <acronym>SVI</acronym> du
		<acronym>VLAN</acronym> Vert.</para>

<screen><prompt>$</prompt> sudo ovs-vsctl add-port dsw-host vlan20 tag=20 -- set interface vlan20 type=internal
<prompt>$</prompt> sudo ovs-vsctl set port vlan20 vlan_mode=access
<prompt>$</prompt> sudo ip addr add 203.0.113.1/24 brd + dev vlan20
<prompt>$</prompt> sudo ip -6 addr add fd6e:c073:b4a3:14::1/64 dev vlan20
<prompt>$</prompt> sudo ip link set dev vlan20 up</screen>
	</listitem>
	</orderedlist>
	</section>

	<section xml:id='inter-vlan-routing-openvswitch.ovs-host.router'>
		<title>Activation du routage sur le système hôte</title>

	<para>Sur un système GNU/Linux, la fonction de routage est contrôlée par
	les paramètres du sous-système réseau du noyau. Le fichier principal de
	configuration des paramètres des sous-systèmes du noyau est :
	<filename>/etc/systcl</filename>. Voici la liste des paramètres à appliquer
	pour activer le routage <acronym>IPv4</acronym> et le routage
	<acronym>IPv6</acronym>.</para>

<screen><prompt>#</prompt> egrep -v '(^#|^$)' /etc/sysctl.conf
net.ipv4.conf.default.rp_filter=1
net.ipv4.conf.all.rp_filter=1
net.ipv4.ip_forward=1
net.ipv6.conf.all.forwarding=1
net.ipv4.conf.all.log_martians=1</screen>

	<para>Cette liste de paramètres n'est effective qu'après utilisation de
	l'instruction <userinput><prompt>#</prompt> sysctl -p</userinput>.</para>

	<para>Il est aussi possible le manipuler les paramètres individuellement à
	partir de la console à l'aide de commandes du type suivant :</para>

<screen><prompt>#</prompt> echo 1 > /proc/sys/net/ipv4/ip_forward
<prompt>#</prompt> echo 1 > /proc/sys/net/ipv6/conf/all/forwarding</screen>
	</section>

	<section xml:id='inter-vlan-routing-openvswitch.ovs-host.autoconf'>
		<title>Autoconfiguration des hôtes des VLANs Orange et Vert</title>

	<para>Pour la partie <acronym>IPv4</acronym>, on fait appel à un démon
	<application>DHCP</application> sur le système hôte. On place ce démon en
	écoute sur les deux interfaces <option>vlan10</option> et
	<option>vlan20</option>.</para>

	<para>Après avoir installé le paquet du serveur <acronym>DHCP</acronym>, on
	restreint son usage aux deux <acronym>VLAN</acronym>s de la
	maquette en éditant le fichier
	<filename>/etc/default/isc-dhcp-server</filename>. On obtient les résultats
	suivants.</para>

<screen><prompt>#</prompt> aptitude search ~idhcp-server
i   isc-dhcp-server      - ISC DHCP server for automatic IP address assignment

<prompt>#</prompt> egrep -v '(^#|^$)' /etc/default/isc-dhcp-server
INTERFACES="vlan10 vlan20"</screen>

	<para>Côté configuration, on applique les éléments suivants dans le fichier
	<filename>/etc/dhcp/dhcpd.conf</filename>.</para>

	<screen><?dbfo keep-together="auto" ?><xi:include
	href='files/host-dhcpd.conf' parse='text'
	xmlns:xi='http://www.w3.org/2001/XInclude'/></screen>

	<para>Pour la partie <acronym>IPv6</acronym>, on fait appel au paquet
	<application>radvd</application> pour l'autoconfiguration des hôtes en mode
	<acronym>SLAAC</acronym> (Document &url.rfc4862;). On vérifie que le paquet
	est bien installé :</para>

<screen><prompt>#</prompt> aptitude search ~iradvd
i   radvd                - Démon d'information de routeur</screen>

	<para>Voici ensuite une copie du fichier
	<filename>/etc/radvd.conf</filename> du système hôte.</para>

	<screen><?dbfo keep-together="auto" ?><xi:include
	href='files/host-radvd.conf' parse='text'
	xmlns:xi='http://www.w3.org/2001/XInclude'/></screen>
	</section>

	<section xml:id='inter-vlan-routing-openvswitch.ovs-host.routing'>
		<title>Affichage des tables de routage du système hôte</title>

	<para>Les tables de routage font apparaître les correspondances entre les
	préfixes réseau définis plus haut et les interfaces configurées sur le
	commutateur &url.ovs; <systemitem>dsw-host</systemitem>.</para>

	<para>La table de routage <acronym>IPv4</acronym> est :</para>

<screen><prompt>$</prompt> ip route ls
<emphasis>default via 192.0.2.1 dev vlan1</emphasis>
<emphasis>192.0.2.0/26 dev vlan1</emphasis>  proto kernel  scope link  src 192.0.2.29
<emphasis>198.51.100.0/24 dev vlan10</emphasis>  proto kernel  scope link  src 198.51.100.1
<emphasis>203.0.113.0/24 dev vlan20</emphasis>  proto kernel  scope link  src 203.0.113.1</screen>

	<para>La table de routage <acronym>IPv6</acronym> est :</para>

<screen><prompt>$</prompt> ip -6 route ls
<emphasis>2001:db8:fe00:8175::/64 dev vlan1</emphasis>  proto kernel  metric 256  pref medium
<emphasis>fd6e:c073:b4a3:a::/64 dev vlan10</emphasis>  proto kernel  metric 256  pref medium
<emphasis>fd6e:c073:b4a3:14::/64 dev vlan20</emphasis>  proto kernel  metric 256  pref medium
fe80::/64 dev vlan1  proto kernel  metric 256  pref medium
fe80::/64 dev eth0  proto kernel  metric 256  pref medium
fe80::/64 dev vlan10  proto kernel  metric 256  pref medium
fe80::/64 dev vlan20  proto kernel  metric 256  pref medium
fe80::/64 dev tap0  proto kernel  metric 256  pref medium
fe80::/64 dev tap1  proto kernel  metric 256  pref medium
<emphasis>default via 2001:db8:fe00:8175::1 dev vlan1</emphasis>  metric 1024  pref medium</screen>
	</section>

<?custom-pagebreak?>
	<section xml:id='inter-vlan-routing-openvswitch.ovs-host.snat'>
		<title>Traduction d'adresses source sur le système hôte</title>

	<para>Les <acronym>VLAN</acronym>s Orange et Vert utilisent des préfixes
	réseau non routables sur l'Internet. On a donc recours à un artifice
	pour accéder au réseau public : la traduction des adresses sources
	(<acronym>S-NAT</acronym>) avec les deux protocoles <acronym>IPv4</acronym>
	et <acronym>IPv6</acronym>.</para>

	<para>Voici une copie des fichiers de règles pour les deux protocoles de
	couche réseau.</para>

	<screen><?dbfo keep-together="auto" ?><xi:include
	href='files/host-rules.v4' parse='text'
	xmlns:xi='http://www.w3.org/2001/XInclude'/></screen>

	<screen><?dbfo keep-together="auto" ?><xi:include
	href='files/host-rules.v6' parse='text'
	xmlns:xi='http://www.w3.org/2001/XInclude'/></screen>

	<para>De façon usuelle, il faut «surveiller» les compteurs associés à
	chaque règle pour en mesurer l'utilisation. À partir des deux jeux de
	règles donnés ci-dessus, on obtient les résultats suivants.</para>

<screen><prompt>#</prompt> iptables -t nat -vnL POSTROUTING
Chain POSTROUTING (policy ACCEPT 10 packets, 975 bytes)
 pkts bytes target     prot opt in     out     source       destination
    7   420 TCPMSS     tcp  --  *      *       0.0.0.0/0    0.0.0.0/0    tcp flags:0x17/0x02 tcpmss match 1400:1536 TCPMSS clamp to PMTU
  143  9668 SNAT       all  --  *      vlan1   0.0.0.0/0    0.0.0.0/0    to:192.0.2.29</screen>

<screen><prompt>#</prompt> ip6tables -t nat -vnL POSTROUTING
Chain POSTROUTING (policy ACCEPT 117 packets, 11199 bytes)
 pkts bytes target     prot opt in     out     source       destination
   94  7520 TCPMSS     tcp      *      *       ::/0         ::/0         tcp flags:0x17/0x02 tcpmss match 1400:1536 TCPMSS clamp to PMTU
   12  1112 SNAT       all      *      vlan1   fd00::/8     ::/0         to:2001:db8:fe00:8175::1d</screen>
	</section>

<?custom-pagebreak?>
	<section xml:id='inter-vlan-routing-openvswitch.ovs-host.vm-run'>
		<title>Lancement des systèmes virtuels</title>

	<para>On lance deux instances de systèmes virtuels dans chacun des deux
	<acronym>VLAN</acronym>s Orange et Vert à l'aide du script suivant :</para>

<screen>#!/bin/bash

../scripts/ovs-startup.sh orange.qed 1024 0
../scripts/ovs-startup.sh green.qed 1024 1</screen>

	<para>Le code du &url.vm.ovs-mode-startup.sh; est donné dans le guide
	&url.vm;.</para>

	<para>Dans ce script, l'instance <systemitem>orange.qed</systemitem>
	utilise le cordon de brassage <option>tap0</option>. Ce cordon a été brassé
	sur un port en mode accès associé au <acronym>VLAN</acronym>
	<option>10</option>. Son adresse <acronym>MAC</acronym> est générée
	automatiquement en fonction du numéro du cordon : <systemitem
	class='etheraddress'>ba:ad:ca:fe:00:00</systemitem>.</para>

	<para>De la même façon, l'instance <systemitem>green.qed</systemitem>
	utilise le cordon de brassage <option>tap1</option>. Ce cordon a été brassé
	sur un autre port en mode accès associé au <acronym>VLAN</acronym>
	<option>20</option>. Son adresse <acronym>MAC</acronym> est générée
	automatiquement en fonction du numéro du cordon : <systemitem
	class='etheraddress'>ba:ad:ca:fe:00:01</systemitem>.</para>

	<para>On visualise l'état des connexions en consultant la table
	<acronym>CAM</acronym> (&url.cam;) du commutateur
	<systemitem>dsw-host</systemitem>.</para>

<screen><prompt>$</prompt> sudo ovs-appctl fdb/show dsw-host
 port  VLAN  MAC                Age
    4    <emphasis>20  ba:ad:ca:fe:00:01</emphasis>    3
    5    10  66:d2:01:39:4a:21    3
    3    <emphasis>10  ba:ad:ca:fe:00:00</emphasis>    3
    6    20  ee:8f:84:8e:cb:a8    3
    1     0  de:56:80:40:1d:ed    0
    2     0  42:d9:5d:6c:89:d8    0</screen>
	</section>

<?custom-pagebreak?>
	<section xml:id='inter-vlan-routing-openvswitch.ovs-host.tests'>
		<title>Tests d'interconnexion entre réseaux</title>

	<para>Depuis le système virtuel dans le <acronym>VLAN</acronym> Orange, on
	effectue une série de tests <acronym>ICMP</acronym> et
	<acronym>HTTP</acronym>.</para>

	<orderedlist>
	<listitem>
		<para>Vers le système virtuel du <acronym>VLAN</acronym> Vert :</para>

<screen><prompt>$</prompt> ping6 -c 2 fd6e:c073:b4a3:14:b8ad:caff:fefe:1
PING fd6e:c073:b4a3:14:b8ad:caff:fefe:1(fd6e:c073:b4a3:14:b8ad:caff:fefe:1) 56 data bytes
64 bytes from fd6e:c073:b4a3:14:b8ad:caff:fefe:1: icmp_seq=1 ttl=63 time=0.986 ms
64 bytes from fd6e:c073:b4a3:14:b8ad:caff:fefe:1: icmp_seq=2 ttl=63 time=1.10 ms

--- fd6e:c073:b4a3:14:b8ad:caff:fefe:1 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 1001ms
rtt min/avg/max/mdev = 0.986/1.047/1.108/0.061 ms</screen>
	</listitem>
	<listitem>
		<para>Vers un hôte situé sur l'Internet :</para>

<screen><prompt>$</prompt> ping6 -nc 2 www.iana.org
PING www.iana.org(2620:0:2d0:200::8) 56 data bytes
64 bytes from 2620:0:2d0:200::8: icmp_seq=1 ttl=51 time=183 ms
64 bytes from 2620:0:2d0:200::8: icmp_seq=2 ttl=51 time=182 ms

--- www.iana.org ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 1001ms
rtt min/avg/max/mdev = 182.993/183.289/183.585/0.296 ms</screen>
	</listitem>
	<listitem>
		<para>Chargement de page web.</para>

<screen><prompt>$</prompt> wget -6 -O /dev/null http://inetdoc.net
--2015-10-21 14:03:05--  http://inetdoc.net/
Résolution de inetdoc.net (inetdoc.net)… 2a01:6600:8083:c300::1
Connexion à inetdoc.net (inetdoc.net)|2a01:6600:8083:c300::1|:80… connecté.
requête HTTP transmise, en attente de la réponse… 200 OK
Taille : 27201 (27K) [text/html]
Sauvegarde en : « /dev/null »

/dev/null          100%[=================>]  26,56K  --.-KB/s   ds 0,06s

2015-10-21 14:03:06 (416 KB/s) — « /dev/null » sauvegardé [27201/27201]</screen>
	</listitem>
	</orderedlist>

	<para>Enfin, il est possible de faire des tests de performances réseau avec
	l'outil <application>iperf</application>. Voici un échantillon de mesures
	entre les deux <acronym>VLAN</acronym>s Orange et Vert.</para>

	<itemizedlist>
	<listitem>
		<para>Serveur côté <acronym>VLAN</acronym> Vert :</para>

<screen><prompt>etu@green-clnt:~$</prompt> iperf -w 320k -V -s
------------------------------------------------------------
Server listening on TCP port 5001
TCP window size:  320 KByte
------------------------------------------------------------
[  4] local fd6e:c073:b4a3:14:b8ad:caff:fefe:1 port 5001 connected with
		fd6e:c073:b4a3:a:b8ad:caff:fefe:0 port 48032
[ ID] Interval       Transfer     Bandwidth
[  4]  0.0-30.0 sec  6.06 GBytes  1.74 Gbits/sec</screen>
	</listitem>
	<listitem>
		<para>Client côté <acronym>VLAN</acronym> Orange : </para>

<screen><prompt>etu@orange-clnt:~$</prompt> iperf -w 320k -P 8 -i 2 -t 30 -V \
	-c fd6e:c073:b4a3:14:b8ad:caff:fefe:1
------------------------------------------------------------
Client connecting to fd6e:c073:b4a3:14:b8ad:caff:fefe:1, TCP port 5001
TCP window size:  320 KByte
------------------------------------------------------------
[  3] local fd6e:c073:b4a3:a:b8ad:caff:fefe:0 port 48032 connected with
		fd6e:c073:b4a3:14:b8ad:caff:fefe:1 port 5001
[ ID] Interval       Transfer     Bandwidth
&lt;snip/>
[  3]  0.0-30.0 sec  6.06 GBytes  1.74 Gbits/sec</screen>
	</listitem>
	</itemizedlist>
	</section>
</section>

<?custom-pagebreak?>
<section xml:id='inter-vlan-routing-openvswitch.ovs-vm'>
	<title>Routage inter-VLAN dans un système virtuel</title>

	<para>Dans ce second exemple, toutes les décisions d'acheminement du
	trafic sont prises dans le sous-système réseau d'une instance de système
	virtuel. Au niveau commutation de circuits, &url.ovs; joue le rôle
	important, tandis qu'au niveau commutation de paquets, la table de routage
	du sous-système réseau du routeur virtuel pointe vers les interfaces des
	différents <acronym>VLAN</acronym>s. Si on se réfère au <link
	linkend='inter-vlan-routing-openvswitch.context.mockup2'>Schéma de la
	topologie</link>, le travail de configuration porte sur les commutateurs
	<systemitem>dsw-host</systemitem>, <systemitem>sw-lab</systemitem> et sur
	une nouvelle instance de système virtuel. Voyons par quelles étapes il faut
	passer.</para>

	<section xml:id='inter-vlan-routing-openvswitch.vm-host.addressing'>
		<title>Plan d'adressage</title>

	<para>On utilise à nouveau les mêmes préfixes réseau que ceux choisis pour
	la <link linkend='mockup1.perimeter.addressing'>première
	maquette</link>.</para>

	<para>On ajoute dans le tableau ci-dessous le routeur virtuel dont les
	interfaces servent à acheminer le trafic entre les réseaux de la
	maquette.</para>

	<table xml:id='mockup2.perimeter.addressing' frame='all' pgwide='1'>
		<title>plan d'adressage des périmètres</title>
	<tgroup cols='4'>
	<colspec colnum='1' colwidth='1*'/>
	<colspec colnum='2' colwidth='1*'/>
	<colspec colnum='3' colwidth='1*'/>
	<colspec colnum='4' colwidth='3*'/>
	<thead>
	<row>
		<?dbfo bgcolor="#333" ?>
		<?dbfo color="#fff" ?>
		<entry>Nom</entry>
		<entry>VLAN</entry>
		<entry>Interface</entry>
		<entry>Préfixe réseau IP</entry>
	</row>
	</thead>
	<tbody>
	<row>
		<entry morerows='1' valign='middle'><citetitle>Système hôte</citetitle></entry>
		<entry morerows='1' valign='middle'>trunk</entry>
		<entry morerows='1' valign='middle'>vlan1</entry>
		<entry><systemitem class='ipaddress'>192.0.2.0/26</systemitem></entry>
	</row>
	<row>
		<entry><systemitem class='ipaddress'>2001:db8:fe00:8175::/64</systemitem></entry>
	</row>
	<row>
		<entry morerows='1' valign='middle'><citetitle>Routeur virtuel</citetitle></entry>
		<entry morerows='1' valign='middle'>trunk</entry>
		<entry morerows='1' valign='middle'>eth0</entry>
		<entry><systemitem class='ipaddress'>192.0.2.0/26</systemitem></entry>
	</row>
	<row>
		<entry><systemitem class='ipaddress'>2001:db8:fe00:8175::/64</systemitem></entry>
	</row>
	<row>
		<entry morerows='1' valign='middle'><citetitle>Orange</citetitle></entry>
		<entry morerows='1' valign='middle'>10</entry>
		<entry morerows='1' valign='middle'>eth0.10</entry>
		<entry><systemitem class='ipaddress'>198.51.100.0/24</systemitem></entry>
	</row>
	<row>
		<entry><systemitem class='ipaddress'>fd6e:c073:b4a3:a::/64</systemitem></entry>
	</row>
	<row>
		<entry morerows='1' valign='middle'><citetitle>Vert</citetitle></entry>
		<entry morerows='1' valign='middle'>20</entry>
		<entry morerows='1' valign='middle'>eth0.20</entry>
		<entry><systemitem class='ipaddress'>203.0.113.0/24</systemitem></entry>
	</row>
	<row>
		<entry><systemitem class='ipaddress'>fd6e:c073:b4a3:14::/64</systemitem></entry>
	</row>
	</tbody>
	</tgroup>
	</table>
	</section>

	<section xml:id='inter-vlan-routing-openvswitch.vm-host.tap-switch'>
		<title>Commutateurs et cordons de brassage</title>

	<para>Relativement à la configuration de la première maquette, une partie
	de la configuration du commutateur <systemitem>dsw-host</systemitem> est
	conservée. L'interface <option>vlan1</option> reste l'interface principale
	du système hôte. C'est elle qui permet d'acheminer le trafic des machines
	virtuelles vers l'Internet.</para>

	<para>En revanche, les cordons de brassage doivent tous être raccordés à
	un nouveau commutateur appelé <systemitem>sw-lab</systemitem>. Ce
	commutateur est lui-même cascadé au commutateur principal du système hôte
	<systemitem>dsw-host</systemitem>.</para>

	<orderedlist>
	<listitem>
		<para>Rappel de la configuration du commutateur principal du système
		hôte.</para>

<screen><prompt>$</prompt> sudo ovs-vsctl show
0fb1e80b-37cf-4dce-9a19-17b9fb989610
    Bridge dsw-host
        Port "eth0"
            Interface "eth0"
        Port "vlan1"
            Interface "vlan1"
                type: internal
        Port dsw-host
            Interface dsw-host
                type: internal
    ovs_version: "2.3.0"</screen>
	</listitem>
	<listitem>
		<para>Création du nouveau commutateur
		<systemitem>sw-lab</systemitem>.</para>

<screen><prompt>$</prompt> sudo ovs-vsctl add-br sw-lab</screen>
	</listitem>
	<listitem>
		<para>Mise en place de la cascade (<wordasword>stacking</wordasword>)
		entre les deux commutateurs.</para>

<screen><prompt>$</prompt> sudo ovs-vsctl add-port dsw-host <emphasis>patch2sw-lab</emphasis> -- \
	set interface patch2sw-lab type=patch options:<emphasis>peer=patch2dsw-host</emphasis>
<prompt>$</prompt> sudo ovs-vsctl add-port sw-lab <emphasis>patch2dsw-host</emphasis> -- \
	set interface patch2dsw-host type=patch options:<emphasis>peer=patch2sw-lab</emphasis></screen>

		<para>Visualisation du résultat.</para>

<screen><prompt>$</prompt> sudo ovs-vsctl show
0fb1e80b-37cf-4dce-9a19-17b9fb989610
    Bridge sw-lab
        Port "<emphasis>patch2dsw-host</emphasis>"
            Interface "patch2dsw-host"
                type: patch
                options: {peer="<emphasis>patch2sw-lab</emphasis>"}
        Port sw-lab
            Interface sw-lab
                type: internal
    Bridge dsw-host
        Port "eth0"
            Interface "eth0"
        Port "vlan1"
            Interface "vlan1"
                type: internal
        Port dsw-host
            Interface dsw-host
                type: internal
        Port "patch2sw-lab"
            Interface "<emphasis>patch2sw-lab</emphasis>"
                type: patch
                options: {peer="<emphasis>patch2dsw-host</emphasis>"}
    ovs_version: "2.3.0"</screen>
	</listitem>
	<listitem>
		<para>Création et activation des cordons de brassage des
		<acronym>VLAN</acronym>s Orange et Vert. Les ports sur lesquels ces
		cordons sont raccordés sont placés en mode accès.</para>

		<para><acronym>VLAN</acronym> Orange :</para>

<screen><prompt>$</prompt> sudo ip tuntap add mode tap dev tap0 group kvm multi_queue
<prompt>$</prompt> sudo ip link set dev tap0 up
<prompt>$</prompt> sudo ovs-vsctl add-port sw-lab tap0 tag=10
<prompt>$</prompt> sudo ovs-vsctl set port tap0 <emphasis>vlan_mode=access</emphasis></screen>

		<para><acronym>VLAN</acronym> Vert :</para>

<screen><prompt>$</prompt> sudo ip tuntap add mode tap dev tap1 group kvm multi_queue
<prompt>$</prompt> sudo ip link set dev tap1 up
<prompt>$</prompt> sudo ovs-vsctl add-port sw-lab tap1 tag=20
<prompt>$</prompt> sudo ovs-vsctl set port tap1 <emphasis>vlan_mode=access</emphasis></screen>
	</listitem>
	<listitem>
		<para>Création et activation du cordon de brassage vers le routeur
		virtuel. Le port du commutateur <systemitem>sw-lab</systemitem> sur
		lequel il est raccordé est configuré en mode
		<wordasword>trunk</wordasword>. Le commutateur accepte de traiter des
		trames avec les étiquettes <acronym>IEEE802.1Q</acronym> dans ce
		mode.</para>

<screen><prompt>$</prompt> sudo ip tuntap add mode tap dev tap2 group kvm multi_queue
<prompt>$</prompt> sudo ip link set dev tap2 up
<prompt>$</prompt> sudo ovs-vsctl add-port sw-lab tap2
<prompt>$</prompt> sudo ovs-vsctl set port tap2 <emphasis>vlan_mode=trunk</emphasis></screen>
	</listitem>
	</orderedlist>
	</section>

<?custom-pagebreak?>
	<section xml:id='inter-vlan-routing-openvswitch.vm-host.launch'>
		<title>Lancement des systèmes virtuels</title>

	<para>Comme le routage du trafic se fait dans une instance de machine
	virtuelle, il faut lancer les instances dès maintenant avant de configurer
	les interfaces réseau. Cette opération se fait à l'aide du script suivant
	:</para>

<screen>#!/bin/bash

../scripts/ovs-startup.sh orange.qed 1024 0
../scripts/ovs-startup.sh green.qed 1024 1
../scripts/ovs-startup.sh red.qed 1024 2</screen>

	<para>Le code du &url.vm.ovs-mode-startup.sh; est donné dans le guide
	&url.vm;.</para>

	<para>D'après le <link
	linkend='inter-vlan-routing-openvswitch.context.mockup2'>schéma de la
	topologie</link>, la seule instance de machine virtuelle joignable depuis
	le système hôte est le routeur (avec le fichier image
	<option>red.qed</option>) dont l'adresse <acronym>MAC</acronym> est
	<systemitem class='etheraddress'>ba:ad:ca:fe:00:02</systemitem>. On peut le
	vérifier en	visualisant les tables	<acronym>CAM</acronym> des deux
	commutateurs puis la table du voisinage réseau du système hôte.</para>

<screen><prompt>$</prompt> sudo ovs-appctl fdb/show dsw-host
 port  VLAN  MAC                Age
    8    10  ba:ad:ca:fe:00:00  221
    8    20  ba:ad:ca:fe:00:01   34
    8     0  <emphasis>ba:ad:ca:fe:00:02</emphasis>   13
    1     0  de:56:80:40:1d:ed    0
    2     0  42:d9:5d:6c:89:d8    0</screen>

<screen><prompt>$</prompt> sudo ovs-appctl fdb/show sw-lab
 port  VLAN  MAC                Age
    3    20  ba:ad:ca:fe:00:01   51
    1     0  de:56:80:40:1d:ed   31
    1     0  42:d9:5d:6c:89:d8   30
    4     0  <emphasis>ba:ad:ca:fe:00:02</emphasis>   30
    2    10  ba:ad:ca:fe:00:00    4</screen>

	<para>L'affichage des deux tables <acronym>CAM</acronym> montre que la base
	de données des <acronym>VLAN</acronym>s est bien partagée entre
	commutateurs. La fonction de commutation de circuits est donc bien
	assurée.</para>

<screen><prompt>$</prompt> ip neighbor ls
192.0.2.1 dev <emphasis>vlan1</emphasis> lladdr de:56:80:40:1d:ed STALE
2001:db8:fe00:8175:21c:23ff:fed2:d105 dev <emphasis>vlan1</emphasis> lladdr 00:1c:23:d2:d1:05 STALE
fe80::dc56:80ff:fe40:1ded dev <emphasis>vlan1</emphasis> lladdr de:56:80:40:1d:ed router DELAY
2001:db8:fe00:8175::1 dev <emphasis>vlan1</emphasis> lladdr de:56:80:40:1d:ed router REACHABLE
<emphasis>fe80::b8ad:caff:fefe:2</emphasis> dev <emphasis>vlan1</emphasis> lladdr <emphasis>ba:ad:ca:fe:00:02</emphasis> STALE</screen>

	<para>L'affichage de la table du voisinage réseau du système hôte montre
	que seule l'interface <option>vlan1</option> est concernée et que seul le
	routeur virtuel est joignable.</para>

	<para>Pour accéder au routeur virtuel, on utilise l'adresse
	<acronym>IPv6</acronym> de lien local avec le protocole
	<acronym>SSH</acronym>. Cette adresse est indépendante de la configuration
	des interfaces de l'instance de système virtuel. Elle est configurée
	automatiquement dès que l'interface est active.</para>

<screen><prompt>$</prompt> ssh etu@fe80::b8ad:caff:fefe:2%vlan1
Warning: Permanently added 'fe80::b8ad:caff:fefe:2%vlan1' (RSA) to the list of known hosts.
etu@fe80::b8ad:caff:fefe:2%vlan1's password:
No mail.
Last login: Sat Oct 24 09:44:54 2015 from fe80::40d9:5dff:fe6c:89d8%eth0</screen>
	</section>

<?custom-pagebreak?>
	<section xml:id='inter-vlan-routing-openvswitch.ovs-vm.rtr'>
		<title>Création des interfaces de routage inter-VLAN</title>

	<para>Une fois la partie commutation de circuits en place, on s'intéresse
	maintenant au routage des paquets dans le sous-système réseau du routeur
	virtuel. On utilise ici des sous-interfaces auxquelles on associe les
	étiquettes <acronym>IEEE802.1Q</acronym>.</para>

	<orderedlist>
	<listitem>
		<para>On commence par la configuration de l'interface
		<option>eth0</option> à laquelle correspond le <acronym>VLAN</acronym>
		natif. On rappelle ici que le <acronym>VLAN</acronym> natif est celui
		auquel appartiennent toutes les trames Ethernet sans étiquette
		<acronym>IEEE802.1Q</acronym> qui circulent dans un
		<wordasword>trunk</wordasword>. Or, on a vu ci-dessus que le canal de
		communication entre le commutateur <systemitem>dsw-host</systemitem> du
		système hôte et le routeur virtuel est justement en mode
		<wordasword>trunk</wordasword>. Voici un extrait du fichier
		<filename>/etc/network/interfaces</filename> du routeur virtuel.</para>

<screen># The primary network interface
allow-hotplug eth0
iface eth0 inet static
	address 192.0.2.28/26
	gateway 192.0.2.1
	dns-nameservers 192.0.2.1

iface eth0 inet6 static
	address 2001:db8:fe00:8175::1c/64
	gateway 2001:db8:fe00:8175::1
	dns-nameservers 2001:db8:fe00:8175::1</screen>
	</listitem>
	<listitem>
		<para>Pour le <acronym>VLAN</acronym> Orange, on commence par créer la
		sous-interface <option>eth0.10</option> avant de lui affecter ses
		adresses <acronym>IPv4</acronym> et <acronym>IPv6</acronym>.</para>

		<para>La commande manuelle de création de sous-interface est la
		suivante :</para>

<screen><prompt>#</prompt> ip link add link eth0 name <emphasis>eth0.10</emphasis> type vlan <emphasis>id 10</emphasis></screen>

		<para>Il est aussi possible de placer directement les paramètres de
		configuration dans le fichier
		<filename>/etc/network/interfaces</filename> et de faire appel aux
		commandes <command>ifup</command> et <command>ifdown</command> ensuite.
		Voici l'extrait du fichier de configuration correspondant.</para>

<screen>auto eth0.10
iface eth0.10 inet static
	hwaddress <emphasis>ba:ad:ca:fe:0a:02</emphasis>
	address 198.51.100.1/24

iface eth0.10 inet6 static
	address fd6e:c073:b4a3:a::1/64</screen>

		<para>L'activation de la sous-interface produit le résultat suivtant
		:</para>

<screen><prompt>root@red-rtr:~#</prompt> ifup eth0.10
Waiting for DAD... Done
<prompt>root@red-rtr:~#</prompt> ip addr ls dev eth0.10
3: eth0.10@eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default
    link/ether <emphasis>ba:ad:ca:fe:0a:02</emphasis> brd ff:ff:ff:ff:ff:ff
    inet 198.51.100.1/24 brd 198.51.100.255 scope global eth0.10
       valid_lft forever preferred_lft forever
    inet6 fd6e:c073:b4a3:a::1/64 scope global
       valid_lft forever preferred_lft forever
    inet6 fe80::b8ad:caff:fefe:2/64 scope link
       valid_lft forever preferred_lft forever</screen>

		<note>
		<para>On a fixé manuellement l'adresse <acronym>MAC</acronym> de la
		sous-interface dans le but de l'identifier plus facilement par la suite
		lors des échanges avec les autres systèmes virtuels.</para>
		</note>
	</listitem>
	<listitem>
		<para>On procède exactement de la même façon pour le
		<acronym>VLAN</acronym> Vert que pour le <acronym>VLAN</acronym>
		Orange.</para>

		<para>La commande manuelle de création de sous-interface est la
		suivante :</para>

<screen><prompt>#</prompt> ip link add link eth0 name <emphasis>eth0.20</emphasis> type vlan <emphasis>id 20</emphasis></screen>

		<para>Voici l'extrait du fichier de configuration
		<filename>/etc/network/interfaces</filename> pour la sous-interface
		<option>eth0.20</option>.</para>

<screen>auto eth0.20
iface eth0.20 inet static
	hwaddress ba:ad:ca:fe:14:02
	address 203.0.113.1/24

iface eth0.20 inet6 static
	address fd6e:c073:b4a3:14::1/64</screen>

		<para>L'activation de la sous-interface produit le résultat suivant
		:</para>

<screen><prompt>root@red-rtr:~#</prompt> ifup eth0.20
Waiting for DAD... Done
<prompt>root@red-rtr:~#</prompt> ip addr ls dev eth0.20
4: eth0.20@eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default
    link/ether ba:ad:ca:fe:14:02 brd ff:ff:ff:ff:ff:ff
    inet 203.0.113.1/24 brd 203.0.113.255 scope global eth0.20
       valid_lft forever preferred_lft forever
    inet6 fd6e:c073:b4a3:14::1/64 scope global
       valid_lft forever preferred_lft forever
    inet6 fe80::b8ad:caff:fefe:2/64 scope link
       valid_lft forever preferred_lft forever</screen>
	</listitem>
	</orderedlist>
	</section>

	<section xml:id='inter-vlan-routing-openvswitch.ovs-vm.router'>
		<title>Activation du routage sur le routeur virtuel</title>

	<para>Cette section est <link
	linkend='inter-vlan-routing-openvswitch.ovs-host.router'>identique à celle
	sur la première maquette</link>.</para>

	<para>On reprend ici la liste des paramètres du fichier
	<filename>/etc/systcl</filename> pour activer le routage
	<acronym>IPv4</acronym> ainsi que le routage
	<acronym>IPv6</acronym>.</para>

<screen><prompt>#</prompt> egrep -v '(^#|^$)' /etc/sysctl.conf
net.ipv4.conf.default.rp_filter=1
net.ipv4.conf.all.rp_filter=1
net.ipv4.ip_forward=1
net.ipv6.conf.all.forwarding=1
net.ipv4.conf.all.log_martians=1</screen>

	<para>Cette liste de paramètres n'est effective qu'après utilisation de
	l'instruction <userinput><prompt>#</prompt> sysctl -p</userinput>.</para>
	</section>

	<section xml:id='inter-vlan-routing-openvswitch.ovs-vm.autoconf'>
		<title>Autoconfiguration des hôtes des VLANs Orange et Vert</title>

	<para>Pour la partie <acronym>IPv4</acronym>, on fait appel à un démon
	<application>DHCP</application> sur le routeur virtuel. On place ce démon en
	écoute sur les deux sous-interfaces <option>eth0.10</option> et
	<option>eth0.20</option>.</para>

	<para>Après avoir installé le paquet du serveur <acronym>DHCP</acronym>, on
	restreint son usage aux deux <acronym>VLAN</acronym>s de la
	maquette en éditant le fichier
	<filename>/etc/default/isc-dhcp-server</filename>. On obtient les résultats
	suivants.</para>

<screen><prompt>#</prompt> aptitude search ~idhcp-server
i   isc-dhcp-server      - ISC DHCP server for automatic IP address assignment

<prompt>#</prompt> egrep -v '(^#|^$)' /etc/default/isc-dhcp-server
INTERFACES="eth0.10 eth0.20"</screen>

	<para>Côté configuration, on applique les éléments suivants dans le fichier
	<filename>/etc/dhcp/dhcpd.conf</filename>.</para>

	<screen><?dbfo keep-together="auto" ?><xi:include
	href='files/host-dhcpd.conf' parse='text'
	xmlns:xi='http://www.w3.org/2001/XInclude'/></screen>

	<para>Pour la partie <acronym>IPv6</acronym>, on fait appel au paquet
	<application>radvd</application> pour l'autoconfiguration des hôtes en mode
	<acronym>SLAAC</acronym> (Document &url.rfc4862;). On vérifie que le paquet
	est bien installé.</para>

<screen><prompt>#</prompt> aptitude search ~iradvd
i   radvd                - Démon d'information de routeur</screen>

	<para>Voici ensuite une copie du fichier
	<filename>/etc/radvd.conf</filename> du routeur virtuel.</para>

	<screen><?dbfo keep-together="auto" ?><xi:include
	href='files/red-rtr-radvd.conf' parse='text'
	xmlns:xi='http://www.w3.org/2001/XInclude'/></screen>
	</section>

	<section xml:id='inter-vlan-routing-openvswitch.ovs-vm.routing'>
		<title>Affichage des tables de routage du routeur virtuel</title>

	<para>Les tables de routage font apparaître les correspondances entre les
	préfixes réseau définis plus haut et les interfaces configurées sur
	l'instance de routeur virtuel.</para>

	<para>La table de routage <acronym>IPv4</acronym> est :</para>

<screen><prompt>$</prompt> ip route ls
<emphasis>default via 192.0.2.1 dev eth0</emphasis>
<emphasis>192.0.2.0/26 dev eth0</emphasis>  proto kernel  scope link  src 192.0.2.29
<emphasis>198.51.100.0/24 dev eth0.10</emphasis>  proto kernel  scope link  src 198.51.100.1
<emphasis>203.0.113.0/24 dev eth0.20</emphasis>  proto kernel  scope link  src 203.0.113.1</screen>

	<para>La table de routage <acronym>IPv6</acronym> est :</para>

<screen><prompt>$</prompt> ip -6 route ls
<emphasis>2001:db8:fe00:8175::/64 dev eth0</emphasis>  proto kernel  metric 256  pref medium
<emphasis>fd6e:c073:b4a3:a::/64 dev eth0.10</emphasis>  proto kernel  metric 256  pref medium
<emphasis>fd6e:c073:b4a3:14::/64 dev eth0.20</emphasis>  proto kernel  metric 256  pref medium
fe80::/64 dev eth0  proto kernel  metric 256  pref medium
fe80::/64 dev eth0.20  proto kernel  metric 256  pref medium
fe80::/64 dev eth0.10  proto kernel  metric 256  pref medium
<emphasis>default via 2001:db8:fe00:8175::1 dev eth0</emphasis>  metric 1024  pref medium</screen>
	</section>

<?custom-pagebreak?>
<section xml:id='inter-vlan-routing-openvswitch.ovs-vm.snat'>
	<title>Traduction d'adresses source sur le routeur virtuel</title>

	<para>Relativement à la première maquette sur laquelle la traduction des
	adresses source a lieu sur le système hôte, seule l'interface
	change.</para>

	<para>Les <acronym>VLAN</acronym>s Orange et Vert utilisent les mêmes
	préfixes réseau non routables sur l'Internet.</para>

	<para>Voici une copie des fichiers de règles pour les deux protocoles de
	couche réseau : <acronym>IPv4</acronym> et <acronym>IPv6</acronym>.</para>

	<screen><?dbfo keep-together="auto" ?><xi:include
	href='files/red-rtr-rules.v4' parse='text'
	xmlns:xi='http://www.w3.org/2001/XInclude'/></screen>

	<screen><?dbfo keep-together="auto" ?><xi:include
	href='files/red-rtr-rules.v6' parse='text'
	xmlns:xi='http://www.w3.org/2001/XInclude'/></screen>

	<para>Il faut à nouveau «surveiller» les compteurs associés à chaque règle
		pour en mesurer l'utilisation. À partir des deux jeux de règles donnés
		ci-dessus, on obtient les résultats suivants.</para>

<screen><prompt>#</prompt> iptables -t nat -vnL POSTROUTING
Chain POSTROUTING (policy ACCEPT 2 packets, 96 bytes)
 pkts bytes target     prot opt in  out     source     destination
    8   448 TCPMSS     tcp  --  *   *       0.0.0.0/0  0.0.0.0/0   tcp flags:0x17/0x02 tcpmss match 1400:1536 TCPMSS clamp to PMTU
  237 15186 SNAT       all  --  *   eth0    0.0.0.0/0  0.0.0.0/0   to:192.0.2.28</screen>

<screen><prompt>#</prompt> ip6tables -t nat -vnL POSTROUTING
Chain POSTROUTING (policy ACCEPT 136 packets, 11260 bytes)
 pkts bytes target     prot opt in  out     source     destination
   46  3680 TCPMSS     tcp      *   *       ::/0       ::/0        tcp flags:0x17/0x02 tcpmss match 1400:1536 TCPMSS clamp to PMTU
    3   251 SNAT       all      *   eth0    fd00::/8   ::/0        to:2001:db8:fe00:8175::1c</screen>
</section>

<section xml:id='inter-vlan-routing-openvswitch.ovs-vm.tests'>
	<title>Tests d'interconnexion entre réseaux</title>

	<para>Les résultats des tests d'interconnexion réseau entre les
		<acronym>VLAN</acronym>s Orange et Vert ainsi que vers l'Internet sont
		<link linkend='inter-vlan-routing-openvswitch.ovs-vm.tests'>identiques
		à ceux obtenus avec la première maquette</link>. Il est donc
		inutile de reproduire les mêmes copies d'écran ici.</para>

	<para>En revanche, les tests de performances diffèrent. Les performances
		sont nettement moins bonnes.</para>

	<para>Voici un échantillon de mesures <application>iperf</application>
		entre les deux <acronym>VLAN</acronym>s Orange et Vert.</para>

	<itemizedlist>
	<listitem>
		<para>Serveur côté <acronym>VLAN</acronym> Vert :</para>

<screen><prompt>etu@green-clnt:~$</prompt> iperf -w 320k -V -s
------------------------------------------------------------
Server listening on TCP port 5001
TCP window size:  320 KByte
------------------------------------------------------------
[  4] local fd6e:c073:b4a3:14:b8ad:caff:fefe:1 port 5001 connected with
		fd6e:c073:b4a3:a:b8ad:caff:fefe:0 port 37210
[ ID] Interval       Transfer     Bandwidth
[  4]  0.0-30.0 sec  2.98 GBytes   852 Mbits/sec</screen>
	</listitem>
	<listitem>
		<para>Client côté <acronym>VLAN</acronym> Orange : </para>

<screen><prompt>etu@orange-clnt:~$</prompt> iperf -w 320k -P 8 -i 2 -t 30 -V \
	-c fd6e:c073:b4a3:14:b8ad:caff:fefe:1
------------------------------------------------------------
Client connecting to fd6e:c073:b4a3:14:b8ad:caff:fefe:1, TCP port 5001
TCP window size:  320 KByte
------------------------------------------------------------
[  3] local fd6e:c073:b4a3:a:b8ad:caff:fefe:0 port 37210 connected with
		fd6e:c073:b4a3:14:b8ad:caff:fefe:1 port 5001
[ ID] Interval       Transfer     Bandwidth
&lt;snip/>
[  3]  0.0-30.0 sec  2.98 GBytes   853 Mbits/sec</screen>
	</listitem>
	</itemizedlist>

	<para>Il apparaît clairement que le routage dans le sous-système réseau du
	système hôte est nettement plus performant que le routage dans une instance
	de système virtuel.</para>
	</section>
</section>

<section xml:id='inter-vlan-routing-openvswitch.references'>
	<title>Applications pratiques</title>

	<para>Le routage inter-VLAN est utilisé à plusieurs niveaux dans les
	documents du site &url.inetdoc;.</para>

	<variablelist>
	<varlistentry>
	<term><citetitle>Introduction au routage inter-VLAN</citetitle></term>
	<listitem>
		<para>Le support de travaux pratiques &url.interco.inter-vlan; est une
		introduction aux opérations de configuration. Il est basé sur une
		séparation entre la fonction de routage au niveau réseau assurée par un
		système GNU/Linux et la fonction de commutation des trames au niveau
		liaison assurée par un commutateur Cisco.</para>
	</listitem>
	</varlistentry>

	<varlistentry>
	<term><citetitle>Introduction au routage dynamique avec OSPF</citetitle></term>
	<listitem>
	<para>Le support de travaux pratique &url.interco.ospf-bird; est une
		excellente occasion de caractériser l'indépendance entre topologie
		logique et topologie physique. En effet, la topologie physique est de
		type étoile puisque l'on utilise des connexions filaires cuivre
		Ethernet alors que la topologie logique est de type triangle grâce à
		l'utilisation des <acronym>VLAN</acronym>s.</para>
	</listitem>
	</varlistentry>
	</variablelist>
</section>
</article>
