TITLE: De l'importance de l'idempotence dans l'automatisation DevOps
AUTHOR: Philippe Latu
DATE: mar. 11 mars 2025 15:37:08 CET
DESC:Édition 2025 des labs Ansible sur l'automatisation des systèmes virtuels Cisco ou Linux en mode IaaS
FORMAT: raw
-----
BODY:
<p>Parmi les principes DevOps, la recherche de l'idempotence, qui consiste à
s'assurer que les traitements automatisés n'ont pas d'effets secondaires
indésirables et peuvent être répétés sans altérer le résultat final est un
objectif vraiment très intéressant.</p>

<p>Après plusieurs sessions de formation, il apparaît toutefois que cet
objectif a un coût en termes de développement. En effet, créer un Playbook
Ansible aux traitements idempotents nécessite souvent d'augmenter
significativement la quantité de code afin de garantir que chaque étape du
processus soit exécutée de manière prévisible et reproductible. Pour les
étudiants qui débutent dans l'automatisation, cela ne facilite pas
l'apprentissage.</p>

<p>Voici les liens vers deux supports de travaux pratiques qui illustrent la
hauteur de la marche à franchir entre placer une ou deux tâches dans un
Playbook Ansible et garantir un traitement reproductible conforme avec l'état
attendu de l'infrastructure cible.</p>

<p>Le lab « <a href="https://md.inetdoc.net/s/nt636Z4Ct">Use Ansible to Back Up
and Configure a c8000v Router</a> » propose une introduction à la création de
Playbooks Ansible.</p>

<a href="https://md.inetdoc.net/s/nt636Z4Ct">
  <img alt="Topologie Ansible et routeur virtuel c8000v"
    src="https://md.inetdoc.net/uploads/e5e25ff9-701b-4407-9ba3-e3765c6436f2.png"
    width="25%" />
</a>
<br />

<p>Le lab « <a href="https://md.inetdoc.net/s/wNFfdfcSw">Using Ansible to
automate the installation of web services on Incus containers</a> » utilise à
nouveau Ansible pour automatiser la gestion de conteneurs à partir d'un
inventaire dynamique. L'installation et la configuration de services web
servent ensuite de prétexte pour manipuler les fichiers de configuration et
valider le fonctionnement de ces services.</p>

<a href="https://md.inetdoc.net/s/wNFfdfcSw">
  <img alt="Topologie Ansible et serveur de conteneurs Incus"
    src="https://md.inetdoc.net/uploads/7559f148-6474-4453-92d2-86016e7081b6.png"
    width="25%" />
</a>
<br />

<p>Les points clés sont :</p>
<ol>
<li>
<strong>L'idempotence et le développement</strong><br />
Les traitements montrent l'importance de l'idempotence dans
l'automatisation, tout en illustrant les conséquences sur la complexité du
code.
</li>
<li>
<strong>Ansible et l'automatisation</strong><br />
Ansible s'est imposé comme un outil de référence en matière d'automatisation et
ses modules occupent une place essentielle.
</li>
<li>
<strong>Sensibilisation aux concepts DevOps</strong><br />
L'objectif principal est de sensibiliser les étudiants aux concepts clés de
l'automatisation DevOps, notamment la déclaration précise de l'état attendu
d'une infrastructure IaaS.
</li>
</ol>

<p>Prenons l'exemple du lancement de conteneurs. Dans un contexte procédural,
on écrirait le code de la commande de lancement dans un script Bash exécuté via
SSH. Dans la liste des tâches Ansible ci-dessous, on commence par obtenir la
liste des conteneurs attendus, puis on ne crée que ceux qui n'existent pas
(when item.rc !=0) et on lance ceux qui ont l'état 'STOPPED'. Le code
idempotent contient 3 tâches.</p>

<pre>  tasks:
    - name: CHECK CONTAINERS STATE
      ansible.builtin.shell:
        cmd: set -o pipefail &amp;&amp; incus ls --format csv -c n,s | grep {{ item }}
        executable: /bin/bash
      register: container_states
      with_inventory_hostnames:
        - containers
      changed_when: false
      failed_when: false
      check_mode: false

    - name: LAUNCH INCUS CONTAINERS
      ansible.builtin.command:
        cmd: incus launch {{ container_image }} "{{ item.item }}"
      loop: "{{ container_states.results }}"
      when: item.rc != 0 # Container not found
      register: containers_created
      changed_when: containers_created is changed

    - name: START STOPPED CONTAINERS
      ansible.builtin.command:
        cmd: incus start "{{ item.item }}"
      loop: "{{ container_states.results }}"
      when: item.rc == 0 and 'STOPPED' in item.stdout
      register: containers_started
      changed_when: containers_started is changed</pre>

<p>À travers cet exemple, on voit que l'idempotence constitue le fil conducteur
pédagogique qui unifie les deux supports de travaux pratiques tout en servant
de critère d'évaluation de la qualité des automatisations développées.</p>

<p>Dans le <a href="https://md.inetdoc.net/s/nt636Z4Ct">Lab 14</a> sur la
configuration des routeurs, les étudiants découvrent progressivement que
l'idempotence ne peut être atteinte qu'en reprenant l'édition du code des
playbooks vers une approche plus modulaire et spécialisée - passant d'une
simple tâche ios_config à une structure plus sophistiquée utilisant des modules
dédiés comme ios_interfaces et ios_l3_interfaces. Cette progression illustre
parfaitement la trajectoire d'apprentissage visée : comprendre que l'état
déclaratif d'une infrastructure nécessite un investissement en termes de
conception logicielle.</p>

<p>De même, le  <a href="https://md.inetdoc.net/s/wNFfdfcSw">Lab 15</a> sur
l'installation des serveurs Web dans des conteneurs Incus pousse les étudiants
à développer une logique conditionnelle élaborée pour vérifier l'état actuel
avant toute modification, comme l'illustrent les tâches de gestion des
conteneurs qui déterminent si un conteneur doit être créé ou simplement
démarré. Ces exercices pratiques transforment un concept théorique -
l'idempotence - en compétence technique concrète. Ils permettent ainsi aux
étudiants de comprendre par la pratique que la déclaration précise de l'état
attendu d'une infrastructure IaaS exige une réflexion approfondie sur les
conditions préalables, les états intermédiaires et les résultats finaux de
chaque opération d'automatisation.</p>

<p>En conclusion, l'objectif de l'édition 2025 des supports de travaux
pratiques du module d'automatisation DevOps est de montrer aux étudiants
l'importance de l'idempotence et de la précision dans la déclaration de l'état
attendu d'une infrastructure. En utilisant des outils comme Ansible, ces
supports pratiques proposent une approche concrète pour comprendre comment gérer
efficacement les infrastructures automatisées.</p>

<p>Vous êtes invités à explorer ce document et à partager vos retours. Votre
expérience contribuera à l'amélioration continue de ces ressources
pédagogiques.</p>
END-----
