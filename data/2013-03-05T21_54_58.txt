TITLE: Initiation au d&eacute;veloppement IPv4 + IPv6
AUTHOR: Philippe Latu
DATE: mardi 5 mars 2013, 21:54:58 (UTC+0100)
DESC: 
FORMAT: raw
-----
BODY:
<p>La rubrique <a href='https://www.inetdoc.net/dev/'>dev</a> vient d'être
enrichie d'un nouveau support sur l'<a
href='https://www.inetdoc.net/dev/socket-c-4and6/'>Initiation au développement C
sur les sockets IPv4 &amp; IPv6</a>.</p>

<p>Ce qui, au départ, ne devait être qu'un complément au précédent document
utilisant seulement IPv4 a finalement abouti à une progression en quatre étapes
ou programmes. J'ai conservé l'idée initiale d'échange de chaîne de caractères
entre un client et un serveur. Cette forme rudimentaire de <i>chat</i> est très
bien accueillie par les étudiants.</p>

<p>La première étape est un plagiat éhonté du programme <tt>showip</tt> du
livre <a href='http://beej.us/guide/bgnet/'>Beej's Guide to Network
Programming</a>. La technique de parcours des enregistrements <tt>addrinfo</tt>
issus de l'appel à <tt>getaddrinfo()</tt> est ensuite reprise dans tous les
autres programmes du document. À la deuxième étape, le programme client se
contente d'ouvrir la première prise réseau ou <i>socket</i> disponible. Jusque
là, tout va bien ! C'est avec le programme serveur que les choses se
compliquent. Faut-il utiliser une ou deux prises réseau ?</p>

<a href="https://www.inetdoc.net/dev/socket-c-4and6/socket-c-4and6.dual-what.html">
<img src="https://www.inetdoc.net/dev/socket-c-4and6/images/dual-stack-single-socket.png"
width="640" alt="dual stack single socket"/></a>

<p>Franchement, je n'ai pas le recul nécessaire pour prendre parti sur cette
question. Ce qui est sûr, c'est que la solution «académique» est plus
séduisante pour un prof. Le code de la couche application est indépendant des
protocoles de la couche réseau et la quantité de code est plus réduite. &#199;a
n'empêche pas de souffrir un peu sur l'utilisation de l'option
<tt>bindv6only</tt> et sur l'interprétation des codes d'erreurs associés. J'ai
fini par aboutir au tableau de tests suivant. Les deux étapes restantes
proposent les programmes serveurs avec une puis deux prises réseau.</p>

<table summary="Protocole de couche réseau utilisé suivant les conditions de
tests" border="1" cellpadding="7" style="border:2px solid
black;border-collapse:collapse;">
<thead>
<tr>
<th style="padding:.33em;">
<p>client ou <em class="wordasword">talker</em></p>
</th>
<th style="padding:.33em;">
<p>Serveur ou <em class="wordasword">listener</em></p>
<p><em class="wordasword">socket</em> unique</p>
<p><code class="option">bindv6only = 0</code></p>
</th>
<th style="padding:.33em;">
<p>Serveur ou <em class="wordasword">listener</em></p>
<p><em class="wordasword">socket</em> double</p>
<p><code class="option">bindv6only = 1</code> -&gt; <em class=
"wordasword">socket</em> <acronym class=
"acronym">IPv6</acronym></p>
</th>
</tr>
</thead>
<tbody>
<tr>
<td style="padding:.33em;">
<p>Client <em class="wordasword">dual stack</em></p>
<p><code class="option">disable_ipv6 = 0</code></p>
</td>
<td style="padding:.33em;">
<p><acronym class="acronym">IPv6</acronym></p>
</td>
<td style="padding:.33em;">
<p><acronym class="acronym">IPv6</acronym></p>
</td>
</tr>
<tr>
<td style="padding:.33em;">
<p>Client <em class="wordasword">single stack</em></p>
<p><code class="option">disable_ipv6 = 1</code></p>
</td>
<td style="padding:.33em;">
<p><acronym class="acronym">IPv6</acronym></p>
<p><em class="wordasword">IPv4-mapped IPv6 addresses</em></p>
</td>
<td style="padding:.33em;">
<p><acronym class="acronym">IPv4</acronym></p>
</td>
</tr>
</tbody>
</table>

<p>Une fois la difficulté de gestion des options sur les <i>sockets</i>
franchie, la dernière étape avec le codage d'un serveur <i>dual stack</i> à
deux prises réseau permet de se familiariser avec l'utilisation de la fonction
<tt>select()</tt> et des macros associées.</p>

<p>Pour conclure, l'utilisation conjointe des deux protocoles <tt>IPv4</tt> et
<tt>IPv6</tt> entraîne un niveau de difficulté plus important dans la
manipulation des enregistrements d'adresses <tt>IP</tt>. Ce pas supplémentaire
peut être délicat à franchir pour un public débutant. C'est certainement la
raison pour laquelle les enseignants préfèrent s'en remettre à des
bibliothèques de plus haut niveau pour aborder les <i>sockets</i>. En Génie
Électrique, les développements sont très proches de l'espace noyau et le
langage C reste incontournable, ce qui rend le compromis délicat à
négocier.</p>

<p>Comme d'habitude, si quelqu'un à le courage de s'attaquer à la lecture du
document, je serais très content de lire toutes les remarques ou critiques
!</p>
END-----
