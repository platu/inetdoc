TITLE: Comment appliquer une configuration déclarative à un commutateur Open vSwitch avec la bibliothèque ovsdbapp ?
AUTHOR: Philippe Latu
DATE: mer. 26 mars 2025 17:06:49 CET
DESC:  Programmation Python de la configuration d'un commutateur Open vSwitch avec la bibliothèque ovsdbapp
FORMAT: raw
-----
BODY:

<p>Les manipulations proposées dans le support de travaux pratiques <a
href="https://md.inetdoc.net/s/cmJ1JEeu9"><strong>DevNet Lab 9 – Configure Open
vSwitch using the Python ovsdbapp library</strong></a>, s'inscrivent dans le
domaine de la <strong>programmabilité des réseaux</strong>. Associée à
l'automatisation, la programmation des topologies d'interconnexion de réseaux
est devenue indispensable pour répondre aux besoins d'agilité, de fiabilité et
d'évolutivité des infrastructures modernes.</p>

<p>La problématique étant posée, nous sommes à nouveau confrontés à des défis
de taille !</p>

<ul>
<li>Nos étudiants, bien que débutants, ont été habitués à l'approche impérative
(séquence d'instructions propres à chaque constructeur). Le passage à une
approche déclarative, qui décrit l'état souhaité sans tenir compte des
équipements cibles représente un changement de paradigme important.</li>

<li>Dans le domaine de la formation, on privilégie souvent des solutions qui
escamotent l'infrastructure physique sous-jacente - <i>underlay network</i> -
qui assure la connectivité de base, pour se concentrer sur l'abstraction
d'infrastructure - <i>overlay network</i> -  qui offre une grande flexibilité
pour les applications et les services. À force de recourir à tous ces
faux-semblants, les étudiants ont du mal à changer de contexte, et certains
pensent même que c'est impossible.</li>
</ul>

<p>Si l'on fait le choix de ne pas former de jeunes narco-dépendants aux grands
fournisseurs du cloud public, on n'a pas d'autre solution que de se plonger
dans les opérations avec un niveau d'exigence élevé en matière
d'automatisation.</p>

<p>C'est ainsi que le support de travaux pratiques <a
href="https://md.inetdoc.net/s/cmJ1JEeu9"><strong>DevNet Lab 9</strong></a>
propose de produire un code Python de configuration des ports d'un commutateur
virtuel Open vSwitch (unique pour débuter) à partir du contenu d'un <a
href="https://github.com/platu/Lab09/blob/main/switch_config.yml">fichier de
déclaration YAML</a>.</p>

<br />
<a href="https://md.inetdoc.net/s/cmJ1JEeu9">
<img alt='Topologie DevNet + ovsdbapp'
src='https://md.inetdoc.net/uploads/f14643b1-0bea-444f-9868-1ebfe5667c31.png'
width='30%' /></a>
<br />

<p>Les manipulations s'appuient sur un scénario concret : dans le contexte
d'une infrastructure cloud privée, des hyperviseurs sont déployés avec chacun
un commutateur de distribution Open vSwitch nommé <tt>dsw-host</tt>. Un grand
nombre d'interfaces <tt>tap</tt> sont provisionnées et déclarées comme ports de
commutateur. Lorsque les étudiants démarrent leurs premiers travaux pratiques,
ils se voient attribuer des ensembles de ces interfaces pour exécuter des
machines virtuelles ou des routeurs. Il s'agit donc de programmer les
topologies réseau d'interconnexion entre le monde virtuel et le monde
physique.</p>

<p>Les objectifs du laboratoire sont simples :</p>
<ul>
<li>Établir une connexion sécurisée au serveur de base de données OVSDB à
l'aide d'un premier script Python</li>
<li>Lister les commutateurs existants et récupérer les attributs détaillés d'un
port particulier</li>
<li>Charger et appliquer des configurations réseau depuis un fichier YAML vers
les ports du commutateur</li>
<li>Vérifier manuellement les configurations appliquées sur l'hyperviseur afin
d'assurer la cohérence entre l'état déclaré et la configuration réseau
réelle</li>
</ul>

<p>La progression des manipulations est organisée en trois parties principales,
chacune apportant un niveau supplémentaire de maîtrise :</p>
<ol>
<li><strong>Mise en place de l'environnement</strong><br />Cette première
partie analyse les conditions nécessaires pour établir un canal de
communication sécurisé entre le code Python et le service <tt>ovsdb-server</tt>
exécuté sur l'hyperviseur. Les étudiants apprennent à utiliser la
fonctionnalité <tt>LocalForward</tt> d'OpenSSH pour créer un tunnel sécurisé
vers le socket Unix du service.</li>

<li><strong>Exploration interactive avec Python</strong><br />Dans cette
deuxième partie, les étudiants apprennent progressivement à interagir avec la
base de données Open vSwitch. Ils commencent par une simple liste des
commutateurs disponibles, puis récupèrent les attributs détaillés d'un port
spécifique, et enfin analysent les configurations VLAN (mode <tt>access</tt> ou
<tt>trunk</tt>).</li>

<li><strong>Évolution vers une approche déclarative</strong><br />La troisième
partie introduit l'approche déclarative avec YAML comme source de vérité pour
la configuration souhaitée. Les étudiants développent un script capable de
charger cette configuration et de l'appliquer aux ports du commutateur. Ils
implémentent également un mode "<tt>dry-run</tt>" pour prévisualiser les
changements sans les appliquer.</li>
</ol>

<p>Cette approche progressive permet aux étudiants de comprendre d'abord les
mécanismes sous-jacents avant d'aborder les concepts plus avancés de
programmabilité réseau. Néanmoins, elle comporte certaines limitations.</p>
<ul>
<li>L'environnement de laboratoire requiert le maintien d'une connexion SSH
active entre le système de développement et l'hyperviseur.</li>
<li>La courbe d'apprentissage associée à la programmation Python et aux
concepts de réseaux virtualisés est assez abrupte pour les débutants.</li>
<li>Les concepts de cache et d'optimisation des requêtes introduits dans la
dernière partie peuvent être difficiles à appréhender sans une solide
compréhension préalable de Python.</li>
</ul>

<p>Heureusement, les étudiants de première année de Master ont déjà parcouru un
long chemin dans le domaine du développement. Malgré ces limitations, ce
laboratoire est une opportunité de progresser dans la compréhension pratique de
la programmabilité réseau moderne, alignée sur les pratiques DevOps
actuelles.</p>

<p>Ces manipulations constituent une première étape vers la maîtrise de la
programmabilité réseau. Elles posent les fondements nécessaires pour aborder
des sujets plus avancés comme l'orchestration multi-équipements ou <i>switch
fabric</i>.</p>

<p>Les compétences acquises permettent non seulement d'automatiser des tâches
répétitives, mais aussi d'adopter une approche plus systématique et fiable de
la gestion des infrastructures réseau - ne serait-ce que pour réaliser les
manipulations suivantes. La transition vers le « <strong>réseau en tant que
code</strong> » (<i>Network as Code</i>) représente un changement de paradigme
aussi important que celui du <strong>DevOps</strong> pour les applications et
les services.</p>

END-----
