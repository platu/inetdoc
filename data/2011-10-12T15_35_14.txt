TITLE: Configuration des fonctions réseau &amp; compilation du noyau Linux
AUTHOR: Philippe Latu
DATE: mercredi 12 octobre 2011, 15:35:14 (UTC+0200)
DESC: 
FORMAT: raw
-----
BODY:
<p>La nouvelle édition du support de travaux pratiques sur la configuration des
fonctions réseau et la compilation du noyau Linux est en ligne. Toute relecture
critique est la bienvenue !</p>

<p>Outre le fait de démystifier la compilation du noyau Linux auprès des
étudiants, le but de ce support est de mettre en relation les fonctions réseau
au sens large (routage, commutation, protocoles) et l'architecture du système
d'exploitation associé à une plateforme matérielle. Avec l'évolution des
architectures des équipements réseau, il est de plus en plus difficile
d'identifier les fonctions qui sont traitées au niveau logiciel ou au niveau
matériel. Je tente ici un rapprochement entre l'architecture d'un routeur et
d'un serveur.</p>

<p>Dans un routeur, la couche <i>Control Plane</i> correspond à des fonctions
purement logicielles telles que les démons de protocoles de routage par
exemple. Une fois la décision logicielle d'acheminement d'un paquet vers une
nouvelle destination prise, cette décision est mémorisée pour être exploitée de
façon optimale par le matériel de la couche <i>Data Plane</i>.</p>

<p>C'est au niveau de cette couche <i>Data Plane</i> que les capacités de
traitement des composants matériels sont prépondérantes dans le choix d'un
équipement. Les composants doivent permettre le transit d'un maximum de flux
réseau en parallèle. On parle ici de commutation de paquets et les composants
spécialisés sont là pour «garantir» la bande passante par port comme le font
les composants d'un commutateur de trames Ethernet au niveau liaison de
données.</p>

<img src="https://www.inetdoc.net/formations/interco-lan-wan/images/hw.router.png"
 width="630" alt="architecture interne routeur"/>

<p>Lorsqu'il est question d'architecture, nous sommes bien souvent noyés dans
le jargon. <a
href="http://en.wikipedia.org/wiki/Forwarding_plane"><i>Forwarding
Plane</i></a>, <i>Data Plane</i>, et autres <i>Crossbar Fabrics</i> sont autant
de noms différents pour un même principe général. Les seuls acronymes qui sont
devenus à peu près standard et transversaux entre différents systèmes sont
<tt>RIB</tt> pour <i>Routing Information Base</i> (au niveau <i>Control
Plane</i>) et <tt>FIB</tt> pour <i>Forwarding Information Base</i> (au niveau
<i>Data Plane</i>).</p>

<blockquote>
<p>Challenge à 2&#8364;cts : retrouver l'algorithme proposé pour le traitement
des entrées de la <i>Forwarding Information Base</i> dans la rubrique routage
avancé des options du noyau Linux.</p>
</blockquote>

<p>Maintenant, si l'on se réfère à l'architecture d'un PC datant d'une dizaine
d'année, les performances ne pouvaient pas être comparables à celles de
l'architecture décrite ci-dessus. En effet, chaque paquet devait transiter deux
fois sur un bus partagé unique entre l'interface réseau et le processeur ; une
fois à la réception et une fois à l'émission. Les évolutions dans
l'architecture des serveurs ont conduit à une augmentation du nombre des
c&#339;urs et du nombre des bus. Tant et si bien qu'il est devenu légitime de
se poser la question du choix entre les deux architectures lorsque le nombre
d'interfaces est limité à 4 ou 8 ports.</p>

<img src="https://www.inetdoc.net/formations/interco-lan-wan/images/srvr.router.png"
 width="630" alt="architecture interne serveur"/>

<p>Dans l'image ci-dessus, j'ai essayé de transposer l'architecture d'un
routeur sur le modèle <a
href="http://fr.wikipedia.org/wiki/Nehalem"><i>Nehalem</i></a> utilisé dans de
nombreux serveurs rackés. C'est une simplification dont le but est de montrer
que le traitement de multiples flux réseau en parallèle est possible sur des
chemins dédiés à cet usage. Il existe de nombreuses <a
href="http://www.qdpma.com/SystemArchitecture/SystemArchitecture_QPI.html">autres
représentations</a> possibles.</p>

<p>Puisque les deux familles d'architectures tendent à se «neutraliser», la
différence devrait se faire sur les services proposés en plus des deux niveaux
<i>Control Plane</i> et <i>Data Plane</i>. C'est ici qu'intervient le thème à
la mode qui assure un bon clivage : la virtualisation. Dans un routeur, la
virtualisation est généralement directement intégrée dans le système. La
solution <a
href="http://en.wikipedia.org/wiki/Virtual_Routing_and_Forwarding"><i>Virtual
Routing and Forwarding</i></a> en est un exemple chez Cisco. &#192; l'opposé,
une société comme <a href="http://www.vyatta.com/">Vyatta</a> a bâti son
portefeuille de solutions sur les fonctions de virtualisation présentes dans le
noyau Linux ; le tout étant intégré dans des serveurs rackés.</p>

<p>On peut imaginer que lors des évolutions à venir les différences de
conception sur la virtualisation vont s'estomper (une fois que <a
href="http://en.wikipedia.org/wiki/Kernel-based_Virtual_Machine">KVM</a> aura
été adopté par tous les acteurs) et qu'un nouveau sujet clivant émergera. Il
est donc essentiel de chercher à assimiler les mécanismes de fonctionnement du
noyau Linux pour préparer cet avenir radieux ... où pas.</p>

<p style="text-align: right;"><a
href="https://www.inetdoc.net/travaux_pratiques/interco.kernel.qa/">Lire la suite</a>
...</p>
END-----
