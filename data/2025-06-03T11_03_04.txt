TITLE: Construire. Conteneuriser. Automatiser. De la création d'une application web à la mise en place d'un pipeline CI/CD fiable.
AUTHOR: Philippe Latu
DATE: mar. 03 juin 2025 11:03:04 CEST
DESC: Lab 12 - Construire le pipeline CI/CD d'un exemple d'application Web à l'aide de Jenkins
FORMAT: raw
-----
BODY:
<p>Voici deux supports de travaux pratiques qui vous proposent une immersion
progressive dans l'intégration et le déploiement continu : du script Bash à la
création d’une application web Python conteneurisée avec Podman (<a
href="https://md.inetdoc.net/s/xNCuzwbfX"><strong>Lab 11</strong></a>), puis
jusqu'à l'automatisation complète du cycle de vie applicatif grâce à un
pipeline CI/CD orchestré par Jenkins (<a
href="https://md.inetdoc.net/s/RJaDMrSM_"><strong>Lab 12</strong></a>).
L'objectif est d'acquérir les compétences nécessaires  pour industrialiser le
déploiement d’applications, garantir leur reproductibilité et leur robustesse à
chaque modification du code.</p>

<h4>Les 3 points forts du <a
href="https://md.inetdoc.net/s/xNCuzwbfX"><strong>Lab 11 – Build a Sample Web
App in a Podman Container</strong></a></h4>

<a href="https://md.inetdoc.net/s/xNCuzwbfX">
<img alt='Lab 11'
src='https://md.inetdoc.net/uploads/6e5bbf8e-da84-4449-8759-5c694cb31fe6.png'
width='30%' /></a>
<br />

<ol>
<li>Maîtrise de l’automatisation avec Bash<br />
Le Lab 11 débute par un court rappel des bases du scripting Bash, indispensable
pour automatiser la création de fichiers, la manipulation de répertoires et
l'exécution de tâches répétitives.</li>

<li>Développement et conteneurisation d’une application web Python<br />
Les étudiants développent une application web minimale en Python/Flask, puis
l'enrichissent avec des fichiers statiques (HTML/CSS) afin de simuler une
expérience utilisateur. La suite du TP les guide dans la création d’un
Dockerfile et l’utilisation de Podman pour construire et exécuter l’application
dans un conteneur, ce qui permet de se familiariser avec le packaging
d’applications.</li>

<li>Cycle complet : build, run, inspect, clean<br />
Le TP ne se contente pas de la simple exécution : il propose une démarche
complète incluant la construction, l’inspection, l'accès interactif au
conteneur, l'arrêt et la suppression contrôlée des ressources. Cette approche
permet de découvrir le cycle de vie d’une application conteneurisée ainsi que
la reproductibilité de sa construction.</li>
</ol>

<h4>Les 3 points forts du <a
href="https://md.inetdoc.net/s/RJaDMrSM_"><strong>Lab 12 – Build a Sample Web
App CI/CD Pipeline Using Jenkins</strong></a></h4>

<a href="https://md.inetdoc.net/s/RJaDMrSM_">
<img alt='Lab 12'
src='https://md.inetdoc.net/uploads/852929be-2644-441c-8756-a8afce4f2b12.png'
width='30%' /></a>
<br />

<ol>
<li>Introduction pratique à CI/CD avec Jenkins<br />
Le Lab 12 s'appuie sur le travail réalisé dans le Lab 11 pour aborder la
gestion de code source avec GitLab, puis l'automatisation des builds et des
tests via Jenkins. L'installation, la configuration et la sécurisation des
accès Jenkins/agent sont détaillées, ce qui permet de rendre l'infrastructure
reproductible et de se rapprocher des bonnes pratiques.</li>

<li>Orchestration complète du pipeline : build, test et déploiement persistant<br />
L’étudiant crée des jobs Jenkins pour construire et tester l’application dans
un conteneur Podman, puis intègre ces étapes dans un pipeline déclenché à
chaque modification du code. L'utilisation d'un service Quadlet (systemd)
garantit que le conteneur reste actif après la fin du job Jenkins, assurant
ainsi la persistance du service.</li>

<li>Contrôle qualité automatisé et diagnostic intégré<br />
Le pipeline intègre des scripts de test automatisés qui vérifient non seulement
l'état du conteneur, mais aussi l'accessibilité réelle de l'application web.
Des diagnostics détaillés (logs, statuts systemd, etc.) sont collectés en cas
d’échec, ce qui illustre l'importance du feedback rapide et de la traçabilité
dans une démarche DevOps.</li>
</ol>

<h4>L'importance d’une démarche CI/CD avec reconstruction complète à chaque
exécution</h4>

<p>La mise en place d’un pipeline CI/CD qui reconstruit l'application et son
environnement à chaque exécution garantit la cohérence, la sécurité et la
reproductibilité du déploiement. À chaque modification du code source, le
pipeline :</p>

<ul>
<li>Récupère la dernière version depuis le gestionnaire de sources (GitLab)</li>
<li>Reconstruit intégralement l'image conteneurisée (Podman)</li>
<li>Déploie l'application dans un environnement propre, géré par systemd (Quadlet)</li>
<li>Exécute des tests automatisés pour valider le bon fonctionnement</li>
</ul>

<p>Cette approche élimine les effets de bord liés à des environnements
incomplets, réduit les risques d’erreurs humaines et accélère la détection des
régressions. Elle s’inscrit dans les bonnes pratiques DevOps, où
l'automatisation et la reconstruction systématique sont des gages de qualité et
de rapidité de livraison.</p>

<h4>Pour conclure</h4>
<p>La progression proposée dans ces deux travaux pratiques illustre l'équilibre
à trouver entre les métiers du développement et des opérations. Ils insistent
sur la reconstruction complète, la persistance des services, l'intégration des
tests et la gestion des erreurs. Cette démarche reflète les exigences du monde
professionnel, où la robustesse, la traçabilité et l'automatisation sont des
critères essentiels pour l'industrialisation des applications.</p>
END-----
